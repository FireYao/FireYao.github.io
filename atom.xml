<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>火尧</title>
  <subtitle>膜法！力量！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fireyao.me/"/>
  <updated>2017-10-10T05:02:06.539Z</updated>
  <id>http://fireyao.me/</id>
  
  <author>
    <name>FireYao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring-Data-JPA 动态查询黑科技</title>
    <link href="http://fireyao.me/2017/10/10/Spring-Data-JPA-%E5%8A%A8%E6%80%81%E6%9F%A5%E8%AF%A2%E9%BB%91%E7%A7%91%E6%8A%80/"/>
    <id>http://fireyao.me/2017/10/10/Spring-Data-JPA-动态查询黑科技/</id>
    <published>2017-10-10T04:55:16.000Z</published>
    <updated>2017-10-10T05:02:06.539Z</updated>
    
    <content type="html"><![CDATA[<p>在开发中,用到动态查询的地方,所有的查询条件包括分页参数,都会被封装成一个查询类<code>XxxQuery</code></p>
<p>比如说上一篇中的<code>Item</code></p>
<p>那么<code>ItemQuery</code>就像这样</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemQuery</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Integer itemId;<span class="comment">//id精确查询 =</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> String itemName;<span class="comment">//name模糊查询 like</span></div><div class="line"></div><div class="line">  	<span class="comment">//价格查询</span></div><div class="line">    <span class="keyword">private</span> Integer itemPrice;<span class="comment">// 价格小于'条件' &lt;</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那现在问题来了,如何去标识这些字段该用怎样的查询条件连接呢,还要考虑到每个查询类都可以通用.</p>
<hr>
<a id="more"></a>
<p>可以用字段注解,来标识字段的查询连接条件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//用枚举类表示查询连接条件</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> MatchType &#123;</div><div class="line">    equal,        <span class="comment">// filed = value</span></div><div class="line">  	<span class="comment">//下面四个用于Number类型的比较</span></div><div class="line">    gt,   <span class="comment">// filed &gt; value</span></div><div class="line">    ge,   <span class="comment">// field &gt;= value</span></div><div class="line">    lt,              <span class="comment">// field &lt; value</span></div><div class="line">    le,      <span class="comment">// field &lt;= value</span></div><div class="line"></div><div class="line">    notEqual,            <span class="comment">// field != value</span></div><div class="line">    like,   <span class="comment">// field like value</span></div><div class="line">    notLike,    <span class="comment">// field not like value</span></div><div class="line">    <span class="comment">// 下面四个用于可比较类型(Comparable)的比较</span></div><div class="line">    greaterThan,        <span class="comment">// field &gt; value</span></div><div class="line">    greaterThanOrEqualTo,   <span class="comment">// field &gt;= value</span></div><div class="line">    lessThan,               <span class="comment">// field &lt; value</span></div><div class="line">    lessThanOrEqualTo,      <span class="comment">// field &lt;= value</span></div><div class="line">    ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> QueryWord &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 数据库中字段名,默认为空字符串,则Query类中的字段要与数据库中字段一致</span></div><div class="line">    <span class="function">String <span class="title">column</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line"></div><div class="line">    <span class="comment">// equal, like, gt, lt...</span></div><div class="line">    <span class="function">MatchType <span class="title">func</span><span class="params">()</span> <span class="keyword">default</span> MatchType.equal</span>;</div><div class="line"></div><div class="line">    <span class="comment">// object是否可以为null</span></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">nullable</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// 字符串是否可为空</span></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">emptiable</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>好了,现在我们可以改造一下<code>ItemQuery</code>了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemQuery</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@QueryWord</span>(column = <span class="string">"item_id"</span>, func = MatchType.equal)</div><div class="line">    <span class="keyword">private</span> Integer itemId;</div><div class="line"></div><div class="line">    <span class="meta">@QueryWord</span>(func = MatchType.like)</div><div class="line">    <span class="keyword">private</span> String itemName;</div><div class="line">  </div><div class="line">    <span class="meta">@QueryWord</span>(func = MatchType.le)</div><div class="line">    <span class="keyword">private</span> Integer itemPrice;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在,我们还需要去构造出查询时的动态条件,那就创建一个所有查询类的基类<code>BaseQuery</code>,我们把分页的条件字段放在基类里.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 所有查询类的基类</div><div class="line"> */</div><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="meta">@Setter</span></div><div class="line"><span class="meta">@NoArgsConstructor</span></div><div class="line"><span class="meta">@AllArgsConstructor</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseQuery</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// start from 0</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> pageIndex = <span class="number">0</span>;</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> pageSize = <span class="number">10</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将查询转换成Specification</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Specification&lt;T&gt; <span class="title">toSpec</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//JPA分页查询类</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Pageable <span class="title">toPageable</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PageRequest(pageIndex, pageSize);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//JPA分页查询类,带排序条件</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Pageable <span class="title">toPageable</span><span class="params">(Sort sort)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PageRequest(pageIndex, pageSize, sort);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//动态查询and连接</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Specification&lt;T&gt; <span class="title">toSpecWithAnd</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.toSpecWithLogicType(<span class="string">"and"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//动态查询or连接</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Specification&lt;T&gt; <span class="title">toSpecWithOr</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.toSpecWithLogicType(<span class="string">"or"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//logicType or/and</span></div><div class="line">    <span class="function"><span class="keyword">private</span> Specification&lt;T&gt; <span class="title">toSpecWithLogicType</span><span class="params">(String logicType)</span> </span>&#123;</div><div class="line">        BaseQuery outerThis = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">return</span> (root, criteriaQuery, cb) -&gt; &#123;</div><div class="line">            Class clazz = outerThis.getClass();</div><div class="line">			<span class="comment">//获取查询类Query的所有字段,包括父类字段</span></div><div class="line">            List&lt;Field&gt; fields = getAllFieldsWithRoot(clazz);</div><div class="line">            List&lt;Predicate&gt; predicates = <span class="keyword">new</span> ArrayList&lt;&gt;(fields.size());</div><div class="line">            <span class="keyword">for</span> (Field field : fields) &#123;</div><div class="line">              	<span class="comment">//获取字段上的@QueryWord注解</span></div><div class="line">                QueryWord qw = field.getAnnotation(QueryWord.class);</div><div class="line">                <span class="keyword">if</span> (qw == <span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">                <span class="comment">// 获取字段名</span></div><div class="line">                String column = qw.column();</div><div class="line">                <span class="comment">//如果主注解上colume为默认值"",则以field为准</span></div><div class="line">                <span class="keyword">if</span> (column.equals(<span class="string">""</span>))</div><div class="line">                    column = field.getName();</div><div class="line"></div><div class="line">                field.setAccessible(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">                    <span class="comment">// nullable</span></div><div class="line">                    Object value = field.get(outerThis);</div><div class="line">                  	<span class="comment">//如果值为null,注解未标注nullable,跳过</span></div><div class="line">                    <span class="keyword">if</span> (value == <span class="keyword">null</span> &amp;&amp; !qw.nullable())</div><div class="line">                        <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">                    <span class="comment">// can be empty</span></div><div class="line">                    <span class="keyword">if</span> (value != <span class="keyword">null</span> &amp;&amp; String.class.isAssignableFrom(value.getClass())) &#123;</div><div class="line">                        String s = (String) value;</div><div class="line">                      	<span class="comment">//如果值为"",且注解未标注emptyable,跳过</span></div><div class="line">                        <span class="keyword">if</span> (s.equals(<span class="string">""</span>) &amp;&amp; !qw.emptiable())</div><div class="line">                            <span class="keyword">continue</span>;</div><div class="line">                    &#125;</div><div class="line">					</div><div class="line">                  	<span class="comment">//通过注解上func属性,构建路径表达式</span></div><div class="line">                    Path path = root.get(column);</div><div class="line">                    <span class="keyword">switch</span> (qw.func()) &#123;</div><div class="line">                        <span class="keyword">case</span> equal:</div><div class="line">                            predicates.add(cb.equal(path, value));</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        <span class="keyword">case</span> like:</div><div class="line">                            predicates.add(cb.like(path, <span class="string">"%"</span> + value + <span class="string">"%"</span>));</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        <span class="keyword">case</span> gt:</div><div class="line">                            predicates.add(cb.gt(path, (Number) value));</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        <span class="keyword">case</span> lt:</div><div class="line">                            predicates.add(cb.lt(path, (Number) value));</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        <span class="keyword">case</span> ge:</div><div class="line">                            predicates.add(cb.ge(path, (Number) value));</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        <span class="keyword">case</span> le:</div><div class="line">                            predicates.add(cb.le(path, (Number) value));</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        <span class="keyword">case</span> notEqual:</div><div class="line">                            predicates.add(cb.notEqual(path, value));</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        <span class="keyword">case</span> notLike:</div><div class="line">                            predicates.add(cb.notLike(path, <span class="string">"%"</span> + value + <span class="string">"%"</span>));</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        <span class="keyword">case</span> greaterThan:</div><div class="line">                            predicates.add(cb.greaterThan(path, (Comparable) value));</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        <span class="keyword">case</span> greaterThanOrEqualTo:</div><div class="line">                            predicates.add(cb.greaterThanOrEqualTo(path, (Comparable) value));</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        <span class="keyword">case</span> lessThan:</div><div class="line">                            predicates.add(cb.lessThan(path, (Comparable) value));</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        <span class="keyword">case</span> lessThanOrEqualTo:</div><div class="line">                            predicates.add(cb.lessThanOrEqualTo(path, (Comparable) value));</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            Predicate p = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">if</span> (logicType == <span class="keyword">null</span> || logicType.equals(<span class="string">""</span>) || logicType.equals(<span class="string">"and"</span>)) &#123;</div><div class="line">                p = cb.and(predicates.toArray(<span class="keyword">new</span> Predicate[predicates.size()]));<span class="comment">//and连接</span></div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (logicType.equals(<span class="string">"or"</span>)) &#123;</div><div class="line">                p = cb.or(predicates.toArray(<span class="keyword">new</span> Predicate[predicates.size()]));<span class="comment">//or连接</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> p;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获取类clazz的所有Field，包括其父类的Field</span></div><div class="line">    <span class="function"><span class="keyword">private</span> List&lt;Field&gt; <span class="title">getAllFieldsWithRoot</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</div><div class="line">        List&lt;Field&gt; fieldList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        Field[] dFields = clazz.getDeclaredFields();<span class="comment">//获取本类所有字段</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != dFields &amp;&amp; dFields.length &gt; <span class="number">0</span>)</div><div class="line">            fieldList.addAll(Arrays.asList(dFields));</div><div class="line"></div><div class="line">        <span class="comment">// 若父类是Object，则直接返回当前Field列表</span></div><div class="line">        Class&lt;?&gt; superClass = clazz.getSuperclass();</div><div class="line">        <span class="keyword">if</span> (superClass == Object.class) <span class="keyword">return</span> Arrays.asList(dFields);</div><div class="line"></div><div class="line">        <span class="comment">// 递归查询父类的field列表</span></div><div class="line">        List&lt;Field&gt; superFields = getAllFieldsWithRoot(superClass);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != superFields &amp;&amp; !superFields.isEmpty()) &#123;</div><div class="line">            superFields.stream().</div><div class="line">                    filter(field -&gt; !fieldList.contains(field)).<span class="comment">//不重复字段</span></div><div class="line">                    forEach(field -&gt; fieldList.add(field));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> fieldList;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>BaseQuery</code>里,就通过<code>toSpecWithAnd()</code> <code>toSpecWithOr()</code>方法动态构建出了查询条件.</p>
<p>那现在<code>ItemQuery</code>就要继承<code>BaseQuery</code>,并实现<code>toSpec()</code>抽象方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemQuery</span> <span class="keyword">extends</span> <span class="title">BaseQuery</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@QueryWord</span>(column = <span class="string">"item_id"</span>, func = MatchType.equal)</div><div class="line">    <span class="keyword">private</span> Integer itemId;</div><div class="line"></div><div class="line">    <span class="meta">@QueryWord</span>(func = MatchType.like)</div><div class="line">    <span class="keyword">private</span> String itemName;</div><div class="line">  </div><div class="line">    <span class="meta">@QueryWord</span>(func = MatchType.le)</div><div class="line">    <span class="keyword">private</span> Integer itemPrice;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Specification&lt;Item&gt; <span class="title">toSpec</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toSpecWithAnd();<span class="comment">//所有条件用and连接</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然肯定还有其他不能在BaseQuery中构建的查询条件,就在子类的toSpec()实现中添加,</p>
<p>比如and和or条件同时存在,这样:<code>ItemQuery</code>条件改成这样</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@QueryWord</span>(column = <span class="string">"item_id"</span>, func = MatchType.equal)</div><div class="line"><span class="keyword">private</span> Integer itemId;</div><div class="line"></div><div class="line"><span class="meta">@QueryWord</span>(func = MatchType.like)</div><div class="line"><span class="keyword">private</span> String itemName;</div><div class="line"></div><div class="line"><span class="comment">//价格范围查询</span></div><div class="line"><span class="keyword">private</span> Integer itemPriceMin;</div><div class="line"><span class="keyword">private</span> Integer itemPriceMax;</div></pre></td></tr></table></figure>
<p>那其他条件就可以在<code>toSpec()</code>添加</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Specification&lt;Item&gt; <span class="title">toSpec</span><span class="params">()</span> </span>&#123;</div><div class="line">    Specification&lt;Item&gt; spec = <span class="keyword">super</span>.toSpecWithAnd();</div><div class="line">    <span class="keyword">return</span> ((root, criteriaQuery, criteriaBuilder) -&gt; &#123;</div><div class="line">        List&lt;Predicate&gt; predicatesList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        predicatesList.add(spec.toPredicate(root, criteriaQuery, criteriaBuilder));</div><div class="line">        <span class="keyword">if</span> (itemPriceMin != <span class="keyword">null</span>) &#123;</div><div class="line">            predicatesList.add(</div><div class="line">                    criteriaBuilder.and(</div><div class="line">                            criteriaBuilder.ge(</div><div class="line">                                    root.get(Item_.itemPrice), itemPriceMin)));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (itemPriceMax != <span class="keyword">null</span>) &#123;</div><div class="line">            predicatesList.add(</div><div class="line">                    criteriaBuilder.and(</div><div class="line">                            criteriaBuilder.le(</div><div class="line">                                    root.get(Item_.itemPrice), itemPriceMax)));</div><div class="line">        &#125;</div><div class="line">       <span class="keyword">return</span> criteriaBuilder.and(predicatesList.toArray(<span class="keyword">new</span> Predicate[predicatesList.size()]));</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    ItemQuery itemQuery = <span class="keyword">new</span> ItemQuery();</div><div class="line">    itemQuery.setItemName(<span class="string">"车"</span>);</div><div class="line">    itemQuery.setItemPriceMax(<span class="number">50</span>);</div><div class="line">    itemQuery.setItemPriceMax(<span class="number">200</span>);</div><div class="line">    Pageable pageable = itemQuery.toPageable(<span class="keyword">new</span> Sort(Sort.Direction.ASC, <span class="string">"itemId"</span>));</div><div class="line">    Page&lt;Item&gt; all = itemRepository.findAll(itemQuery.toSpec(), pageable);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在这个<code>BaseQuery</code>和<code>QuertWord</code>就可以在各个动态查询处使用了,只需在查询字段上标注@QueryWord注解,</p>
<p>然后实现<code>BaseQuery</code>中的抽象方法<code>toSpec()</code>,通过<code>JpaSpecificationExecutor</code>接口中的这几个方法,就可以实现动态查询了,是不是很方便.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function">T <span class="title">findOne</span><span class="params">(Specification&lt;T&gt; var1)</span></span>;</div><div class="line">    <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">(Specification&lt;T&gt; var1)</span></span>;</div><div class="line">    <span class="function">Page&lt;T&gt; <span class="title">findAll</span><span class="params">(Specification&lt;T&gt; var1, Pageable var2)</span></span>;</div><div class="line">    <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">(Specification&lt;T&gt; var1, Sort var2)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">long</span> <span class="title">count</span><span class="params">(Specification&lt;T&gt; var1)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发中,用到动态查询的地方,所有的查询条件包括分页参数,都会被封装成一个查询类&lt;code&gt;XxxQuery&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;比如说上一篇中的&lt;code&gt;Item&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;那么&lt;code&gt;ItemQuery&lt;/code&gt;就像这样&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Data&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ItemQuery&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Integer itemId;&lt;span class=&quot;comment&quot;&gt;//id精确查询 =&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String itemName;&lt;span class=&quot;comment&quot;&gt;//name模糊查询 like&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	&lt;span class=&quot;comment&quot;&gt;//价格查询&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Integer itemPrice;&lt;span class=&quot;comment&quot;&gt;// 价格小于&#39;条件&#39; &amp;lt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那现在问题来了,如何去标识这些字段该用怎样的查询条件连接呢,还要考虑到每个查询类都可以通用.&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="spring" scheme="http://fireyao.me/categories/spring/"/>
    
    
      <category term="spring" scheme="http://fireyao.me/tags/spring/"/>
    
      <category term="jpa" scheme="http://fireyao.me/tags/jpa/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Data-JPA criteria 查询</title>
    <link href="http://fireyao.me/2017/10/10/Spring-Data-JPA-criteria-%E6%9F%A5%E8%AF%A2/"/>
    <id>http://fireyao.me/2017/10/10/Spring-Data-JPA-criteria-查询/</id>
    <published>2017-10-10T04:54:47.000Z</published>
    <updated>2017-10-10T05:08:26.041Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Data JPA虽然大大的简化了持久层的开发,但是在实际开发中,很多地方都需要高级动态查询</p>
<p><strong>Criteria API</strong></p>
<blockquote>
<p>Criteria 查询是以元模型的概念为基础的，元模型是为具体持久化单元的受管实体定义的，这些实体可以是实体类，嵌入类或者映射的父类。</p>
<p>CriteriaQuery接口：代表一个specific的顶层查询对象，它包含着查询的各个部分，比如：select 、from、where、group by、order by等注意：CriteriaQuery对象只对实体类型或嵌入式类型的Criteria查询起作用</p>
<p> Root接口：代表Criteria查询的根对象，Criteria查询的查询根定义了实体类型，能为将来导航获得想要的结果，它与SQL查询中的FROM子句类似</p>
<p>​    1：Root实例是类型化的，且定义了查询的FROM子句中能够出现的类型。</p>
<p>​    2：查询根实例能通过传入一个实体类型给 AbstractQuery.from方法获得。</p>
<p>​    3：Criteria查询，可以有多个查询根。</p>
<p>​    4：AbstractQuery是CriteriaQuery 接口的父类，它提供得到查询根的方法。CriteriaBuilder接口：用来构建CritiaQuery的构建器对象Predicate：一个简单或复杂的谓词类型，其实就相当于条件或者是条件组合</p>
<p>如果编译器能够对查询执行语法正确性检查，那么对于 Java 对象而言该查询就是类型安全的。Java™Persistence API (JPA) 的 2.0 版本引入了 Criteria API，这个 API 首次将类型安全查询引入到 Java 应用程序中，并为在运行时动态地构造查询提供一种机制。</p>
</blockquote>
<p><strong>JPA元模型</strong></p>
<blockquote>
<p>在JPA中,标准查询是以元模型的概念为基础的.元模型是为具体持久化单元的受管实体定义的.这些实体可以是实体类,嵌入类或者映射的父类.提供受管实体元信息的类就是元模型类.</p>
<p>使用元模型类最大的优势是凭借其实例化可以在编译时访问实体的持久属性.该特性使得criteria 查询更加类型安全.</p>
</blockquote>
<a id="more"></a>
<p>如下,<code>Item</code>实体类对应的元模型<code>Item_</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Generated</span>(value = <span class="string">"org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor"</span>)</div><div class="line"><span class="meta">@StaticMetamodel</span>(Item.class)</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Item_</span> </span>&#123;</div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingularAttribute&lt;Item, Integer&gt; itemId;</div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingularAttribute&lt;Item, String&gt; itemName;</div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingularAttribute&lt;Item, Integer&gt; itemStock;</div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingularAttribute&lt;Item, Integer&gt; itemPrice;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样的元模型不用手动创建,在Maven中添加插件,编译之后@Entity注解的类就会自动生成对应的元模型</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--hibernate JPA 自动生成元模型--&gt;</span></div><div class="line"><span class="comment">&lt;!-- 相关依赖 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-jpamodelgen<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">compilerArguments</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;<span class="name">processor</span>&gt;</span>org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor<span class="tag">&lt;/<span class="name">processor</span>&gt;</span></div><div class="line">              <span class="tag">&lt;/<span class="name">compilerArguments</span>&gt;</span></div><div class="line">     	<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>使用criteria 查询简单Demo</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemServiceImpl</span> <span class="keyword">implements</span> <span class="title">ItemService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> EntityManager entityManager;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Item&gt; <span class="title">findByConditions</span><span class="params">(String name, Integer price, Integer stock)</span> </span>&#123;</div><div class="line">      	<span class="comment">//创建CriteriaBuilder安全查询工厂</span></div><div class="line">        <span class="comment">//CriteriaBuilder是一个工厂对象,安全查询的开始.用于构建JPA安全查询.</span></div><div class="line">        CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();</div><div class="line">        <span class="comment">//创建CriteriaQuery安全查询主语句</span></div><div class="line">        <span class="comment">//CriteriaQuery对象必须在实体类型或嵌入式类型上的Criteria 查询上起作用。</span></div><div class="line">        CriteriaQuery&lt;Item&gt; query = criteriaBuilder.createQuery(Item.class);</div><div class="line">        <span class="comment">//Root 定义查询的From子句中能出现的类型</span></div><div class="line">        Root&lt;Item&gt; itemRoot = query.from(Item.class);</div><div class="line">      	<span class="comment">//Predicate 过滤条件 构建where字句可能的各种条件</span></div><div class="line">      	<span class="comment">//这里用List存放多种查询条件,实现动态查询</span></div><div class="line">        List&lt;Predicate&gt; predicatesList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">      	<span class="comment">//name模糊查询 ,like语句</span></div><div class="line">		<span class="keyword">if</span> (name != <span class="keyword">null</span>) &#123;</div><div class="line">            predicatesList.add(</div><div class="line">                    criteriaBuilder.and(</div><div class="line">                            criteriaBuilder.like(</div><div class="line">                                    itemRoot.get(Item_.itemName), <span class="string">"%"</span> + name + <span class="string">"%"</span>)));</div><div class="line">        &#125;</div><div class="line">     	<span class="comment">// itemPrice 小于等于 &lt;= 语句</span></div><div class="line">        <span class="keyword">if</span> (price != <span class="keyword">null</span>) &#123;</div><div class="line">            predicatesList.add(</div><div class="line">                    criteriaBuilder.and(</div><div class="line">                            criteriaBuilder.le(</div><div class="line">                                    itemRoot.get(Item_.itemPrice), price)));</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//itemStock 大于等于 &gt;= 语句</span></div><div class="line">        <span class="keyword">if</span> (stock != <span class="keyword">null</span>) &#123;</div><div class="line">            predicatesList.add(</div><div class="line">                    criteriaBuilder.and(</div><div class="line">                            criteriaBuilder.ge(</div><div class="line">                                    itemRoot.get(Item_.itemStock), stock)));</div><div class="line">        &#125;</div><div class="line">      	<span class="comment">//where()拼接查询条件</span></div><div class="line">        query.where(predicatesList.toArray(<span class="keyword">new</span> Predicate[predicatesList.size()]));</div><div class="line">        TypedQuery&lt;Item&gt; typedQuery = entityManager.createQuery(query);</div><div class="line">        List&lt;Item&gt; resultList = typedQuery.getResultList();</div><div class="line">        <span class="keyword">return</span> resultList;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>criteriaBuilder中各方法对应的语句</strong></p>
<blockquote>
<p>equle : filed = value</p>
<p>gt / greaterThan : filed &gt; value</p>
<p>lt / lessThan : filed &lt; value</p>
<p>ge / greaterThanOrEqualTo : filed &gt;= value</p>
<p>le / lessThanOrEqualTo: filed &lt;= value</p>
<p>notEqule : filed != value</p>
<p>like : filed like value</p>
<p>notLike : filed not like value</p>
</blockquote>
<p>如果每个动态查询的地方都这么写,那就感觉太麻烦了.</p>
<p><strong>那实际上,在使用Spring Data JPA的时候，只要我们的Repo层接口继承JpaSpecificationExecutor接口就可以使用Specification进行动态查询了，我们先看下JpaSpecificationExecutor接口：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function">T <span class="title">findOne</span><span class="params">(Specification&lt;T&gt; var1)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">(Specification&lt;T&gt; var1)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Page&lt;T&gt; <span class="title">findAll</span><span class="params">(Specification&lt;T&gt; var1, Pageable var2)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">(Specification&lt;T&gt; var1, Sort var2)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">long</span> <span class="title">count</span><span class="params">(Specification&lt;T&gt; var1)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这里有个很重要的接口<code>Specification</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Specification</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function">Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;T&gt; var1, CriteriaQuery&lt;?&gt; var2, CriteriaBuilder var3)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个接口只有一个方法,返回动态查询的数据结构,用于构造各种动态查询的SQL</p>
<p><strong>Specification接口示例</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Page&lt;Item&gt; <span class="title">findByConditions</span><span class="params">(String name, Integer price, Integer stock, Pageable page)</span> </span>&#123;</div><div class="line">     Page&lt;Item&gt; page = itemRepository.findAll((root, criteriaQuery, criteriaBuilder) -&gt; &#123;</div><div class="line">            List&lt;Predicate&gt; predicatesList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">            <span class="comment">//name模糊查询 ,like语句</span></div><div class="line">            <span class="keyword">if</span> (name != <span class="keyword">null</span>) &#123;</div><div class="line">                predicatesList.add(</div><div class="line">                        criteriaBuilder.and(</div><div class="line">                                criteriaBuilder.like(</div><div class="line">                                        root.get(Item_.itemName), <span class="string">"%"</span> + name + <span class="string">"%"</span>)));</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// itemPrice 小于等于 &lt;= 语句</span></div><div class="line">            <span class="keyword">if</span> (price != <span class="keyword">null</span>) &#123;</div><div class="line">                predicatesList.add(</div><div class="line">                        criteriaBuilder.and(</div><div class="line">                                criteriaBuilder.le(</div><div class="line">                                        root.get(Item_.itemPrice), price)));</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//itemStock 大于等于 &gt;= 语句</span></div><div class="line">            <span class="keyword">if</span> (stock != <span class="keyword">null</span>) &#123;</div><div class="line">                predicatesList.add(</div><div class="line">                        criteriaBuilder.and(</div><div class="line">                                criteriaBuilder.ge(</div><div class="line">                                        root.get(Item_.itemStock), stock)));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> criteriaBuilder.and(</div><div class="line">                    predicatesList.toArray(<span class="keyword">new</span> Predicate[predicatesList.size()]));</div><div class="line">        &#125;, page);</div><div class="line">    <span class="keyword">return</span> page;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>在这里因为<code>findAll(Specification&lt;T&gt; var1, Pageable var2)</code>方法中参数 <code>Specification&lt;T&gt;</code> 是一个匿名内部类</p>
<p>那这里就可以直接用lambda表达式直接简化代码.</p>
<p>这样写,就比用CriteriaBuilder安全查询工厂简单多了.</p>
</blockquote>
<p>调用:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Page&lt;Item&gt; itemPageList = findByConditions(<span class="string">"车"</span>, <span class="number">300</span>, <span class="keyword">null</span>, <span class="keyword">new</span> PageRequest(<span class="number">1</span>, <span class="number">10</span>));</div></pre></td></tr></table></figure>
<p>利用JPA的<code>Specification&lt;T&gt;</code>接口和元模型就实现动态查询了.</p>
<p>那其实这样每一个需要动态查询的地方都需要写一个这样类似的<code>findByConditions</code>方法,感觉也很麻烦了.当然是越简化越好.</p>
<p>下一篇将会讲一个JPA<code>Specification</code>更方便的使用.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Data JPA虽然大大的简化了持久层的开发,但是在实际开发中,很多地方都需要高级动态查询&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Criteria API&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Criteria 查询是以元模型的概念为基础的，元模型是为具体持久化单元的受管实体定义的，这些实体可以是实体类，嵌入类或者映射的父类。&lt;/p&gt;
&lt;p&gt;CriteriaQuery接口：代表一个specific的顶层查询对象，它包含着查询的各个部分，比如：select 、from、where、group by、order by等注意：CriteriaQuery对象只对实体类型或嵌入式类型的Criteria查询起作用&lt;/p&gt;
&lt;p&gt; Root接口：代表Criteria查询的根对象，Criteria查询的查询根定义了实体类型，能为将来导航获得想要的结果，它与SQL查询中的FROM子句类似&lt;/p&gt;
&lt;p&gt;​    1：Root实例是类型化的，且定义了查询的FROM子句中能够出现的类型。&lt;/p&gt;
&lt;p&gt;​    2：查询根实例能通过传入一个实体类型给 AbstractQuery.from方法获得。&lt;/p&gt;
&lt;p&gt;​    3：Criteria查询，可以有多个查询根。&lt;/p&gt;
&lt;p&gt;​    4：AbstractQuery是CriteriaQuery 接口的父类，它提供得到查询根的方法。CriteriaBuilder接口：用来构建CritiaQuery的构建器对象Predicate：一个简单或复杂的谓词类型，其实就相当于条件或者是条件组合&lt;/p&gt;
&lt;p&gt;如果编译器能够对查询执行语法正确性检查，那么对于 Java 对象而言该查询就是类型安全的。Java™Persistence API (JPA) 的 2.0 版本引入了 Criteria API，这个 API 首次将类型安全查询引入到 Java 应用程序中，并为在运行时动态地构造查询提供一种机制。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;JPA元模型&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在JPA中,标准查询是以元模型的概念为基础的.元模型是为具体持久化单元的受管实体定义的.这些实体可以是实体类,嵌入类或者映射的父类.提供受管实体元信息的类就是元模型类.&lt;/p&gt;
&lt;p&gt;使用元模型类最大的优势是凭借其实例化可以在编译时访问实体的持久属性.该特性使得criteria 查询更加类型安全.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="spring" scheme="http://fireyao.me/categories/spring/"/>
    
    
      <category term="spring" scheme="http://fireyao.me/tags/spring/"/>
    
      <category term="jpa" scheme="http://fireyao.me/tags/jpa/"/>
    
  </entry>
  
  <entry>
    <title>Spring Data JPA 的使用</title>
    <link href="http://fireyao.me/2017/10/09/spring-data-jpa-%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://fireyao.me/2017/10/09/spring-data-jpa-的使用/</id>
    <published>2017-10-09T08:38:04.000Z</published>
    <updated>2017-10-09T08:43:06.658Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇Spring JavaConfig中配置数据源使用了JPA,这里就介绍一下Spring data jpa的常用方法.</p>
<h3 id="spring-data-jpa介绍"><a href="#spring-data-jpa介绍" class="headerlink" title="spring data jpa介绍"></a>spring data jpa介绍</h3><h4 id="什么是JPA"><a href="#什么是JPA" class="headerlink" title="什么是JPA"></a>什么是JPA</h4><blockquote>
<p>JPA(Java Persistence API)是Sun官方提出的Java持久化规范。它为Java开发人员提供了一种对象/关联映射工具来管理Java应用中的关系数据。</p>
</blockquote>
<p>Spring Data JPA 是 Spring 基于 ORM 框架、JPA 规范的基础上封装的一套JPA应用框架，可使开发者用极简的代码即可实现对数据的访问和操作。它提供了包括增删改查等在内的常用功能，且易于扩展！学习并使用 Spring Data JPA 可以极大提高开发效率！</p>
<blockquote>
<p>spring data jpa让我们解脱了DAO层的操作，基本上所有CRUD都可以依赖于它来实现</p>
</blockquote>
<p><strong>简单查询</strong></p>
<blockquote>
<p>基本查询也分为两种，一种是spring data默认已经实现，一种是根据查询的方法来自动解析成SQL。</p>
<p>spring data jpa 默认预先生成了一些基本的CURD的方法，例如：增、删、改等等</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Item</span>, <span class="title">Integer</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</div><div class="line"><span class="comment">//空的，可以什么都不用写</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    Item item = <span class="keyword">new</span> Item();</div><div class="line">    itemRepository.save(item);</div><div class="line">    List&lt;Item&gt; itemList = itemRepository.findAll();</div><div class="line">    Item one = itemRepository.findOne(<span class="number">1</span>);</div><div class="line">    itemRepository.delete(item);</div><div class="line">    <span class="keyword">long</span> count = itemRepository.count();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>自定义简单查询</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function">Item <span class="title">findByItemName</span><span class="params">(String itemName)</span></span>;</div><div class="line"></div><div class="line"><span class="function">List&lt;Item&gt; <span class="title">findByItemNameLike</span><span class="params">(String itemName)</span></span>;</div><div class="line"></div><div class="line"><span class="function">Long <span class="title">deleteByItemId</span><span class="params">(Integer id)</span></span>;</div><div class="line"></div><div class="line"><span class="function">List&lt;Item&gt; <span class="title">findByItemNameLikeOrderByItemNameDesc</span><span class="params">(String itemName)</span></span>;</div></pre></td></tr></table></figure>
<p><strong>具体的关键字，使用方法和生产成SQL如下表所示</strong></p>
<table>
<thead>
<tr>
<th>Keyword</th>
<th>Sample</th>
<th>JPQL snippet</th>
</tr>
</thead>
<tbody>
<tr>
<td>And</td>
<td>findByLastnameAndFirstname</td>
<td>… where x.lastname = ?1 and x.firstname = ?2</td>
</tr>
<tr>
<td>Or</td>
<td>findByLastnameOrFirstname</td>
<td>… where x.lastname = ?1 or x.firstname = ?2</td>
</tr>
<tr>
<td>Is,Equals</td>
<td>findByFirstnameIs,findByFirstnameEquals</td>
<td>… where x.firstname = ?1</td>
</tr>
<tr>
<td>Between</td>
<td>findByStartDateBetween</td>
<td>… where x.startDate between ?1 and ?2</td>
</tr>
<tr>
<td>LessThan</td>
<td>findByAgeLessThan</td>
<td>… where x.age &lt; ?1</td>
</tr>
<tr>
<td>LessThanEqual</td>
<td>findByAgeLessThanEqual</td>
<td>… where x.age ⇐ ?1</td>
</tr>
<tr>
<td>GreaterThan</td>
<td>findByAgeGreaterThan</td>
<td>… where x.age &gt; ?1</td>
</tr>
<tr>
<td>GreaterThanEqual</td>
<td>findByAgeGreaterThanEqual</td>
<td>… where x.age &gt;= ?1</td>
</tr>
<tr>
<td>After</td>
<td>findByStartDateAfter</td>
<td>… where x.startDate &gt; ?1</td>
</tr>
<tr>
<td>Before</td>
<td>findByStartDateBefore</td>
<td>… where x.startDate &lt; ?1</td>
</tr>
<tr>
<td>IsNull</td>
<td>findByAgeIsNull</td>
<td>… where x.age is null</td>
</tr>
<tr>
<td>IsNotNull,NotNull</td>
<td>findByAge(Is)NotNull</td>
<td>… where x.age not null</td>
</tr>
<tr>
<td>Like</td>
<td>findByFirstnameLike</td>
<td>… where x.firstname like ?1</td>
</tr>
<tr>
<td>NotLike</td>
<td>findByFirstnameNotLike</td>
<td>… where x.firstname not like ?1</td>
</tr>
<tr>
<td>StartingWith</td>
<td>findByFirstnameStartingWith</td>
<td>… where x.firstname like ?1 (parameter bound with appended %)</td>
</tr>
<tr>
<td>EndingWith</td>
<td>findByFirstnameEndingWith</td>
<td>… where x.firstname like ?1 (parameter bound with prepended %)</td>
</tr>
<tr>
<td>Containing</td>
<td>findByFirstnameContaining</td>
<td>… where x.firstname like ?1 (parameter bound wrapped in %)</td>
</tr>
<tr>
<td>OrderBy</td>
<td>findByAgeOrderByLastnameDesc</td>
<td>… where x.age = ?1 order by x.lastname desc</td>
</tr>
<tr>
<td>Not</td>
<td>findByLastnameNot</td>
<td>… where x.lastname &lt;&gt; ?1</td>
</tr>
<tr>
<td>In</td>
<td>findByAgeIn(Collection ages)</td>
<td>… where x.age in ?1</td>
</tr>
<tr>
<td>NotIn</td>
<td>findByAgeNotIn(Collection age)</td>
<td>… where x.age not in ?1</td>
</tr>
<tr>
<td>TRUE</td>
<td>findByActiveTrue()</td>
<td>… where x.active = true</td>
</tr>
<tr>
<td>FALSE</td>
<td>findByActiveFalse()</td>
<td>… where x.active = false</td>
</tr>
<tr>
<td>IgnoreCase</td>
<td>findByFirstnameIgnoreCase</td>
<td>… where UPPER(x.firstame) = UPPER(?1)</td>
</tr>
</tbody>
</table>
<p><strong>分页查询</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">Page&lt;Item&gt; <span class="title">findALL</span><span class="params">(Pageable pageable)</span></span>;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="keyword">int</span> page=<span class="number">1</span>,size=<span class="number">10</span>;</div><div class="line">    Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.DESC, <span class="string">"id"</span>);<span class="comment">//根据id降序排序</span></div><div class="line">    Pageable pageable = <span class="keyword">new</span> PageRequest(page, size, sort);</div><div class="line">    Page&lt;Item&gt; pageResult = itemRepository.findALL(pageable);</div><div class="line">    List&lt;Item&gt; itemList = pageResult.getContent();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>自定义SQL查询</strong></p>
<blockquote>
<p>在SQL的查询方法上面使用<code>@Query</code>注解，如涉及到删除和修改在需要加上<code>@Modifying</code>.也可以根据需要添加 <code>@Transactional</code> 对事物的支持</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//自定分页查询 一条查询数据,一条查询数据量</span></div><div class="line"><span class="meta">@Query</span>(value = <span class="string">"select i from Item i"</span>,</div><div class="line">        countQuery = <span class="string">"select count(i.itemId) from Item i"</span>)</div><div class="line"><span class="function">Page&lt;Item&gt; <span class="title">findall</span><span class="params">(Pageable pageable)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//nativeQuery = true 本地查询  就是使用原生SQL查询</span></div><div class="line"><span class="meta">@Query</span>(value = <span class="string">"select * from item  where item_id = ?1"</span>, nativeQuery = <span class="keyword">true</span>)</div><div class="line"><span class="function">Item <span class="title">findAllItemById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</div><div class="line"></div><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="meta">@Modifying</span></div><div class="line"><span class="meta">@Query</span>(<span class="string">"delete from Item i where i.itemId = :itemId"</span>)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteInBulkByItemId</span><span class="params">(@Param(value = <span class="string">"itemId"</span>)</span> Integer itemId)</span>;</div><div class="line"></div><div class="line"><span class="comment">//#&#123;#entityName&#125;就是指定的@Entity,这里就是Item</span></div><div class="line"> <span class="meta">@Query</span>(<span class="string">"select i from #&#123;#entityName&#125; i where i.itemId = ?1"</span>)</div><div class="line"> <span class="function">Item <span class="title">findById</span><span class="params">(Integer id)</span></span>;</div></pre></td></tr></table></figure>
<p><strong>命名查询</strong></p>
<blockquote>
<p>在实体类上使用@NameQueries注解</p>
<p>在自己实现的DAO的Repository接口里面定义一个同名的方法</p>
<p>然后就可以使用了，Spring会先找是否有同名的NamedQuery，如果有，那么就不会按照接口定义的方法来解析。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//命名查询</span></div><div class="line"><span class="meta">@NamedQueries</span>(&#123;</div><div class="line">        <span class="meta">@NamedQuery</span>(name = <span class="string">"Item.findItemByitemPrice"</span>,</div><div class="line">                query = <span class="string">"select i from Item i where i.itemPrice between ?1 and ?2"</span>),</div><div class="line">        <span class="meta">@NamedQuery</span>(name = <span class="string">"Item.findItemByitemStock"</span>,</div><div class="line">                query = <span class="string">"select i from Item i where i.itemStock between ?1 and ?2"</span>),</div><div class="line">&#125;)</div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"item_id"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> itemId;</div><div class="line">    <span class="keyword">private</span> String itemName;</div><div class="line">    <span class="keyword">private</span> Integer itemPrice;</div><div class="line">    <span class="keyword">private</span> Integer itemStock;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 这里是在domain实体类里<span class="doctag">@NamedQuery</span>写对应的HQL</div><div class="line"> * <span class="doctag">@NamedQuery</span>(name = "Item.findItemByitemPrice",</div><div class="line">               baseQuery = "select i from Item i where i.itemPrice between ?1 and ?2"),</div><div class="line"> * <span class="doctag">@param</span> price1</div><div class="line"> * <span class="doctag">@param</span> price2</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function">List&lt;Item&gt; <span class="title">findItemByitemPrice</span><span class="params">(Integer price1, Integer price2)</span></span>;</div><div class="line"><span class="function">List&lt;Item&gt; <span class="title">findItemByitemStock</span><span class="params">(Integer stock1, Integer stock2)</span></span>;</div></pre></td></tr></table></figure>
<p>那么spring data jpa是怎么通过这些规范来进行组装成查询语句呢?</p>
<h4 id="Spring-Data-JPA框架在进行方法名解析时，会先把方法名多余的前缀截取掉，比如-find、findBy、read、readBy、get、getBy，然后对剩下部分进行解析。"><a href="#Spring-Data-JPA框架在进行方法名解析时，会先把方法名多余的前缀截取掉，比如-find、findBy、read、readBy、get、getBy，然后对剩下部分进行解析。" class="headerlink" title="Spring Data JPA框架在进行方法名解析时，会先把方法名多余的前缀截取掉，比如 find、findBy、read、readBy、get、getBy，然后对剩下部分进行解析。"></a>Spring Data JPA框架在进行方法名解析时，会先把方法名多余的前缀截取掉，比如 find、findBy、read、readBy、get、getBy，然后对剩下部分进行解析。</h4><h5 id="假如创建如下的查询：findByUserDepUuid-，框架在解析该方法时，首先剔除-findBy，然后对剩下的属性进行解析"><a href="#假如创建如下的查询：findByUserDepUuid-，框架在解析该方法时，首先剔除-findBy，然后对剩下的属性进行解析" class="headerlink" title="假如创建如下的查询：findByUserDepUuid()，框架在解析该方法时，首先剔除 findBy，然后对剩下的属性进行解析"></a><strong>假如创建如下的查询：<code>findByUserDepUuid()</code>，框架在解析该方法时，首先剔除 findBy，然后对剩下的属性进行解析</strong></h5><ol>
<li>先判断 userDepUuid （根据 POJO 规范，首字母变为小写）是否为查询实体的一个属性，如果是，则表示根据该属性进行查询；如果没有该属性，继续第二步；</li>
<li>从右往左截取第一个大写字母开头的字符串此处为Uuid），然后检查剩下的字符串是否为查询实体的一个属性，如果是，则表示根据该属性进行查询；如果没有该属性，则重复第二步，继续从右往左截取；最后假设user为查询实体的一个属性；</li>
<li>接着处理剩下部分（DepUuid），先判断 user 所对应的类型是否有depUuid属性，如果有，则表示该方法最终是根据 <code>Doc.user.depUuid</code> 的取值进行查询；否则继续按照步骤 2 的规则从右往左截取，最终表示根据 <code>Doc.user.dep.uuid</code> 的值进行查询。</li>
<li>可能会存在一种特殊情况，比如 Doc包含一个 user 的属性，也有一个 userDep 属性，此时会存在混淆。可以明确在属性之间加上 “_” 以显式表达意图，比如 <code>findByUser_DepUuid()</code> 或者 <code>findByUserDep_uuid()</code></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇Spring JavaConfig中配置数据源使用了JPA,这里就介绍一下Spring data jpa的常用方法.&lt;/p&gt;
&lt;h3 id=&quot;spring-data-jpa介绍&quot;&gt;&lt;a href=&quot;#spring-data-jpa介绍&quot; class=&quot;headerlink&quot; title=&quot;spring data jpa介绍&quot;&gt;&lt;/a&gt;spring data jpa介绍&lt;/h3&gt;&lt;h4 id=&quot;什么是JPA&quot;&gt;&lt;a href=&quot;#什么是JPA&quot; class=&quot;headerlink&quot; title=&quot;什么是JPA&quot;&gt;&lt;/a&gt;什么是JPA&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;JPA(Java Persistence API)是Sun官方提出的Java持久化规范。它为Java开发人员提供了一种对象/关联映射工具来管理Java应用中的关系数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Spring Data JPA 是 Spring 基于 ORM 框架、JPA 规范的基础上封装的一套JPA应用框架，可使开发者用极简的代码即可实现对数据的访问和操作。它提供了包括增删改查等在内的常用功能，且易于扩展！学习并使用 Spring Data JPA 可以极大提高开发效率！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;spring data jpa让我们解脱了DAO层的操作，基本上所有CRUD都可以依赖于它来实现&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;简单查询&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;基本查询也分为两种，一种是spring data默认已经实现，一种是根据查询的方法来自动解析成SQL。&lt;/p&gt;
&lt;p&gt;spring data jpa 默认预先生成了一些基本的CURD的方法，例如：增、删、改等等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ItemRepository&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;JpaRepository&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Item&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Integer&lt;/span&gt;&amp;gt;, &lt;span class=&quot;title&quot;&gt;JpaSpecificationExecutor&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Item&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//空的，可以什么都不用写&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="spring" scheme="http://fireyao.me/categories/spring/"/>
    
    
      <category term="spring" scheme="http://fireyao.me/tags/spring/"/>
    
      <category term="jpa" scheme="http://fireyao.me/tags/jpa/"/>
    
  </entry>
  
  <entry>
    <title>丢掉xml使用JavaConfig配置Spring</title>
    <link href="http://fireyao.me/2017/10/09/%E4%B8%A2%E6%8E%89xml%E4%BD%BF%E7%94%A8JavaConfig%E9%85%8D%E7%BD%AESpring/"/>
    <id>http://fireyao.me/2017/10/09/丢掉xml使用JavaConfig配置Spring/</id>
    <published>2017-10-09T07:30:49.000Z</published>
    <updated>2017-10-09T07:34:18.714Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-JavaConfig"><a href="#Spring-JavaConfig" class="headerlink" title="Spring JavaConfig"></a>Spring JavaConfig</h3><p>最近撸了一遍<strong>Spring action 4</strong>,发现里面讲的都不再使用xml文件来配置spring,全都采用Java代码来配置.</p>
<p>用Java代码配置的话,感觉要比xml更便于维护,而且用代码肯定比xml更爽嘛</p>
<p>下面来一步步用JavaConfig搭一个Spring工程</p>
<p>那在用xml配置的时候,项目都是从加载web.xml文件再扫描到各种spring-*.xml文件</p>
<p>那不用xml文件,项目从哪里启动呢?</p>
<p>那就要靠这个类了,<code>AbstractAnnotationConfigDispatcherServletInitializer</code>,这个就相当于web.xml啦,在这里面可以配置上下文,DispatcherServlet,过滤器等等bean;</p>
<p>首先咱先创建一个类<code>SpittrWebAppInitialzer</code></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.fireyao;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.web.filter.CharacterEncodingFilter;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.Filter;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpittrWebAppInitialzer</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 配置root上下文,如Jpa数据源等等的配置</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class[]&#123;RootConfig.class&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 配置dispatcher servlet</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class[]&#123;WebConfig.class&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将DispatcherServlet映射到 "/"</div><div class="line">     * 指定开始被servlet处理的url,配置从/开始  </div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">"/"</span>&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 这里注册的所有过滤器,都会映射到DispatcherServlet</div><div class="line">     * 就是说这里的过滤器过滤规则是 /*</div><div class="line">     * 所有的请求都会先到这里注册的过滤器中</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Filter[]&#123;</div><div class="line">                <span class="keyword">new</span> CharacterEncodingFilter(<span class="string">"UTF-8"</span>, <span class="keyword">true</span>)</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>SpittrWebAppInitialzer</code>类里面加载了<code>RootConfig</code>和<code>WebConfig</code>两个配置类,</p>
<p>再创建这两个类以及相关的配置(以下省略package和import)</p>
<p><code>RootConfig</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 相当于applicationContext.xml</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableTransactionManagement</span></div><div class="line"><span class="meta">@EnableJpaRepositories</span>(basePackages = &#123;<span class="string">"com.fireyao.repository"</span>&#125;,</div><div class="line">        entityManagerFactoryRef = <span class="string">"entityManagerFactory"</span>,</div><div class="line">        transactionManagerRef = <span class="string">"transactionManager"</span>)</div><div class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:db.properties"</span>, <span class="string">"classpath:hibernate.properties"</span>, <span class="string">"classpath:app.properties"</span>&#125;)</div><div class="line"><span class="meta">@ComponentScan</span>(basePackages = <span class="string">"com.fireyao"</span>,</div><div class="line">        excludeFilters = &#123;</div><div class="line">                <span class="meta">@ComponentScan</span>.Filter(</div><div class="line">                        type = FilterType.ANNOTATION, value = EnableWebMvc.class</div><div class="line">                )&#125;)</div><div class="line"><span class="meta">@EnableAspectJAutoProxy</span>(proxyTargetClass = <span class="keyword">true</span>)</div><div class="line"><span class="comment">/**</span></div><div class="line"> *   proxyTargetClass = true ==&gt; 使用cglib代理</div><div class="line"> *   proxyTargetClass = false(默认) ==&gt; 使用JDK代理</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RootConfig</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(value = <span class="string">"$&#123;db.driver:org.postgresql.Driver&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String DRIVERCLASSNAME;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;db.username&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String USERNAME;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;db.password&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String PASSWORD;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;db.jdbcURL&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String URL;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;hibernate.hbm2dll.create_namespaces&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String CREATE_NAMESPACES;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;hibernate.hbm2ddl.auto&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String HBM2DDL_AUTO;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;hibernate.show_sql&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String SHOW_SQL;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;hibernate.format_sql&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String FORMAT_SQL;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;hibernate.generate_statistics&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String GENERATE_STATISTICS;</div><div class="line">	</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 配置数据源</div><div class="line">   */</div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</div><div class="line">        dataSource.setDriverClassName(DRIVERCLASSNAME);</div><div class="line">        dataSource.setUrl(URL);</div><div class="line">        dataSource.setUsername(USERNAME);</div><div class="line">        dataSource.setPassword(PASSWORD);</div><div class="line"></div><div class="line">        <span class="comment">/*  配置初始化大小、最小、最大*/</span></div><div class="line">        dataSource.setInitialSize(<span class="number">5</span>);</div><div class="line">        dataSource.setMinIdle(<span class="number">5</span>);</div><div class="line">        dataSource.setMaxActive(<span class="number">20</span>);</div><div class="line">        <span class="comment">/* 配置获取连接等待超时的时间*/</span></div><div class="line">        dataSource.setMaxWait(<span class="number">30000</span>);</div><div class="line">        <span class="comment">/*配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒*/</span></div><div class="line">        dataSource.setTimeBetweenEvictionRunsMillis(<span class="number">60000</span>);</div><div class="line">        <span class="comment">/*配置一个连接在池中最小生存的时间，单位是毫秒*/</span></div><div class="line">        dataSource.setMinEvictableIdleTimeMillis(<span class="number">300000</span>);</div><div class="line">        <span class="comment">/*申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效*/</span></div><div class="line">        dataSource.setTestWhileIdle(<span class="keyword">true</span>);</div><div class="line">        dataSource.setValidationQuery(<span class="string">"select 1"</span>);</div><div class="line">        <span class="keyword">return</span> dataSource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> HibernateJpaVendorAdapter <span class="title">hibernateJpaVendorAdapter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HibernateJpaVendorAdapter();</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"entityManagerFactory"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactory</span><span class="params">(DruidDataSource dataSource,HibernateJpaVendorAdapter hibernateJpaVendorAdapter)</span> </span>&#123;</div><div class="line">        LocalContainerEntityManagerFactoryBean entityManagerFactory = <span class="keyword">new</span> LocalContainerEntityManagerFactoryBean();</div><div class="line">        entityManagerFactory.setDataSource(dataSource);</div><div class="line">        entityManagerFactory.setJpaVendorAdapter(hibernateJpaVendorAdapter);</div><div class="line">        entityManagerFactory.setPackagesToScan(<span class="string">"com.fireyao.domain"</span>);</div><div class="line"></div><div class="line">        <span class="comment">/*指定JPA属性；如Hibernate中指定是否显示SQL的是否显示、方言等*/</span></div><div class="line">        Map&lt;String, Object&gt; jpaProp = <span class="keyword">new</span> HashMap();</div><div class="line">        jpaProp.put(<span class="string">"hibernate.dialect"</span>, <span class="keyword">new</span> PostgisDialect());</div><div class="line">        jpaProp.put(<span class="string">"hibernate.hbm2ddl.auto"</span>, HBM2DDL_AUTO);</div><div class="line">        jpaProp.put(<span class="string">"hibernate.show_sql"</span>, SHOW_SQL);</div><div class="line">        jpaProp.put(<span class="string">"hibernate.generate_statistics"</span>, GENERATE_STATISTICS);</div><div class="line">        jpaProp.put(<span class="string">"hibernate.format_sql"</span>, FORMAT_SQL);</div><div class="line">        jpaProp.put(<span class="string">"hibernate.hbm2dll.create_namespaces"</span>, CREATE_NAMESPACES);</div><div class="line">        entityManagerFactory.setJpaPropertyMap(jpaProp);</div><div class="line">        <span class="keyword">return</span> entityManagerFactory;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 事务管理器</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> entityManagerFactory</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"transactionManager"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> JpaTransactionManager <span class="title">transactionManager</span><span class="params">(LocalContainerEntityManagerFactoryBean entityManagerFactory)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JpaTransactionManager(entityManagerFactory.getObject());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>WebConfig</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 相当于springmvc-servlet.xml</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableWebMvc</span><span class="comment">//启用spring mvc</span></div><div class="line"><span class="meta">@ComponentScan</span>(basePackages = <span class="string">"com.fireyao.controller"</span>) <span class="comment">//启用组件扫描</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</div><div class="line">        FastJsonHttpMessageConverter fastConverter = <span class="keyword">new</span> FastJsonHttpMessageConverter();</div><div class="line">        FastJsonConfig fastJsonConfig = <span class="keyword">new</span> FastJsonConfig();</div><div class="line">        fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);</div><div class="line">        <span class="comment">//处理中文乱码问题</span></div><div class="line">        List&lt;MediaType&gt; fastMediaTypes = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        fastMediaTypes.add(MediaType.APPLICATION_JSON_UTF8);</div><div class="line">        fastConverter.setSupportedMediaTypes(fastMediaTypes);</div><div class="line">        fastConverter.setFastJsonConfig(fastJsonConfig);</div><div class="line">        converters.add(fastConverter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Thymeleaf视图解析器</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> springTemplateEngine</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ThymeleafViewResolver <span class="title">viewResolver</span><span class="params">(SpringTemplateEngine springTemplateEngine)</span> </span>&#123;</div><div class="line">        ThymeleafViewResolver viewResolver = <span class="keyword">new</span> ThymeleafViewResolver();</div><div class="line">        viewResolver.setTemplateEngine(springTemplateEngine);</div><div class="line">        viewResolver.setCharacterEncoding(<span class="string">"utf-8"</span>);</div><div class="line">        <span class="keyword">return</span> viewResolver;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 模版引擎</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> iTemplateResolver</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SpringTemplateEngine <span class="title">templateEngine</span><span class="params">(ITemplateResolver iTemplateResolver)</span> </span>&#123;</div><div class="line">        SpringTemplateEngine templateEngine = <span class="keyword">new</span> SpringTemplateEngine();</div><div class="line">        templateEngine.setTemplateResolver(iTemplateResolver);</div><div class="line">        <span class="keyword">return</span> templateEngine;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Thymeleaf3.0之后</div><div class="line">     * Thymeleaf模版解析器</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ITemplateResolver <span class="title">iTemplateResolver</span><span class="params">()</span> </span>&#123;</div><div class="line">        SpringResourceTemplateResolver templateResolver = <span class="keyword">new</span> SpringResourceTemplateResolver();</div><div class="line">        templateResolver.setTemplateMode(<span class="string">"HTML5"</span>);</div><div class="line">        templateResolver.setPrefix(<span class="string">"/WEB-INF/templates/"</span>);</div><div class="line">        templateResolver.setSuffix(<span class="string">".html"</span>);</div><div class="line">        templateResolver.setTemplateMode(<span class="string">"HTML"</span>);</div><div class="line">        templateResolver.setCharacterEncoding(<span class="string">"utf-8"</span>);</div><div class="line"></div><div class="line">        templateResolver.setCacheable(<span class="keyword">false</span>);</div><div class="line">        <span class="keyword">return</span> templateResolver;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Thymeleaf3.0之前</div><div class="line">     * Thymeleaf模版解析器</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">  <span class="comment">/*  @Bean</span></div><div class="line">    public TemplateResolver templateResolver() &#123;</div><div class="line">        TemplateResolver resolver = new ServletContextTemplateResolver();</div><div class="line">        resolver.setPrefix("/WEB-INF/VIEWS/");</div><div class="line">        resolver.setSuffix(".html");</div><div class="line">        resolver.setTemplateMode("HTML5");</div><div class="line">        resolver.setCacheable(false);</div><div class="line">        return resolver;</div><div class="line">    &#125;*/</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 配置静态资源的处理</div><div class="line">     * 要求DispatcherServlet将对静态资源的请求转发到Servlet容器中默认的Servlet上</div><div class="line">     * 而不是使用DispatcherServlet本身来处理此类请求。</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> configurer</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> </span>&#123;</div><div class="line">        configurer.enable();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 配置视图解析器</div><div class="line">     * ==&gt; JSP视图</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="comment">/*@Bean</span></div><div class="line">    public ViewResolver viewResolver() &#123;</div><div class="line">        InternalResourceViewResolver resolver = new InternalResourceViewResolver();</div><div class="line">        resolver.setPrefix("/WEB-INF/views/");</div><div class="line">        resolver.setSuffix(".jsp");</div><div class="line">        resolver.setExposeContextBeansAsAttributes(true);</div><div class="line">        return resolver;</div><div class="line">    &#125;*/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>@Configuration</code> 标注为配置类</p>
<p><code>@EnableTransactionManagement</code>注解开启注解式事务的支持。</p>
<p><code>@EnableJpaRepositories</code>注解开启对Spring Data JPA Repostory的支持</p>
<p><code>@PropertySource</code> 扫面db.properties等配置文件,可以用<code>@Value</code>注解取到properties中的值</p>
<p><code>@ComponentScan</code> 配置扫描类包 相当于<code>&lt;context:component-scan base-package=&quot;com.fireyao&quot;/&gt;</code></p>
<p><code>@EnableAspectJAutoProxy</code> 表示开启AOP代理自动配置</p>
<blockquote>
<p>@EnableAspectJAutoProxy中proxyTargetClass属性<br>​    proxyTargetClass = true ==&gt; 使用cglib代理<br>​    proxyTargetClass = false(默认) ==&gt; 使用JDK代理</p>
</blockquote>
<p>那spring最基本的JavaConfig就这样了.</p>
<p>是不是看上去很舒服,果然还是要用Java代码才爽.</p>
<p>maven依赖就不贴出来了.</p>
<p>附上源码地址 <a href="https://github.com/FireYao/springAction4" target="_blank" rel="external">FireYao/springAction4</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-JavaConfig&quot;&gt;&lt;a href=&quot;#Spring-JavaConfig&quot; class=&quot;headerlink&quot; title=&quot;Spring JavaConfig&quot;&gt;&lt;/a&gt;Spring JavaConfig&lt;/h3&gt;&lt;p&gt;最近撸了一遍&lt;strong&gt;Spring action 4&lt;/strong&gt;,发现里面讲的都不再使用xml文件来配置spring,全都采用Java代码来配置.&lt;/p&gt;
&lt;p&gt;用Java代码配置的话,感觉要比xml更便于维护,而且用代码肯定比xml更爽嘛&lt;/p&gt;
&lt;p&gt;下面来一步步用JavaConfig搭一个Spring工程&lt;/p&gt;
&lt;p&gt;那在用xml配置的时候,项目都是从加载web.xml文件再扫描到各种spring-*.xml文件&lt;/p&gt;
&lt;p&gt;那不用xml文件,项目从哪里启动呢?&lt;/p&gt;
&lt;p&gt;那就要靠这个类了,&lt;code&gt;AbstractAnnotationConfigDispatcherServletInitializer&lt;/code&gt;,这个就相当于web.xml啦,在这里面可以配置上下文,DispatcherServlet,过滤器等等bean;&lt;/p&gt;
&lt;p&gt;首先咱先创建一个类&lt;code&gt;SpittrWebAppInitialzer&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="spring" scheme="http://fireyao.me/categories/spring/"/>
    
    
      <category term="spring" scheme="http://fireyao.me/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>端口映射+nginx对外请求控制</title>
    <link href="http://fireyao.me/2017/10/09/%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84-nginx%E5%AF%B9%E5%A4%96%E8%AF%B7%E6%B1%82%E6%8E%A7%E5%88%B6/"/>
    <id>http://fireyao.me/2017/10/09/端口映射-nginx对外请求控制/</id>
    <published>2017-10-09T05:59:27.000Z</published>
    <updated>2017-10-09T06:12:01.181Z</updated>
    
    <content type="html"><![CDATA[<p>​    <strong>前几天接到个任务,要和另一家公司对接,具体就是我这开一个接口给对面调用.因为一开始在内网测试,那问题来了,怎么才能让对面访问到呢?</strong></p>
<p>​        当然是找运维大兄弟…..操作也很简单,就是用路由做一个端口映射,用公网ip做一个端口映射到我本机地址.这样外网就能访问到我的tomcat了.</p>
<p>比如说公网ip是<code>192.168.1.0</code>,我的ip是<code>192.168.1.1</code>,tomcat端口是8080.</p>
<p>那就在路由上配一个端口9876直接映射到本地tomcat 192.168.1.1:8080.那现在外网就可以通过<code>http://192.168.1.0:9876/</code>访问到本地<code>http://192.168.1.1:8080/</code>了.</p>
<p>就这样,做好了接口,问题又来了,因为这个接口是在核心系统里,那这样就会把所有的接口都暴露了,肯定不行..</p>
<a id="more"></a>
<p>怎么做呢,怎么才能拦截这些请求呢? 当然又去问了运维大兄弟,再查了些资料,得知用Nginx可以只允许访问指定的url,其他的都直接对外禁止访问.</p>
<p>那怎么做呢?</p>
<p>重新修改下映射规则,不直接映射到tomcat,先经过nginx,通过nginx再把请求发送到tomcat.</p>
<p>这里就重新映射一个端口8000,在nginx中监听这个端口,然后再配置访问规则,再代理到tomcat</p>
<p>在nginx.config中添加一段server</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">  		<span class="comment">#监听8080端口,这个8080是路由映射到本机的端口</span></div><div class="line">        <span class="attribute">listen</span>       <span class="number">8000</span>;</div><div class="line">        <span class="attribute">server_name</span>  <span class="number">0.0.0.0</span>;</div><div class="line">        <span class="comment">#charset koi8-r;</span></div><div class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></div><div class="line">        <span class="attribute">location</span> / &#123;</div><div class="line">    		<span class="comment">#阻止所有请求,这里将永远输出403错误</span></div><div class="line">            <span class="attribute">deny</span> all;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">  		<span class="comment">#允许访问 /test/processe接口</span></div><div class="line">        <span class="attribute">location</span> <span class="regexp">~ /test/processe</span> &#123;</div><div class="line">    		<span class="comment"># 代理本地项目url</span></div><div class="line">        	<span class="attribute">proxy_pass</span> http://192.168.4.48:8080;</div><div class="line">        &#125;</div><div class="line">  		<span class="comment">#如果还有其他接口,就再添加一个location </span></div><div class="line">  		 <span class="comment">#location ~ /test/processe1 &#123;</span></div><div class="line">        	<span class="comment">#proxy_pass http://192.168.4.48:8080;</span></div><div class="line">  		<span class="comment">#&#125;</span></div><div class="line"> 		 <span class="comment">#location ~ /test/processe2 &#123;</span></div><div class="line">        	<span class="comment">#proxy_pass http://192.168.4.48:8080;</span></div><div class="line">       	 <span class="comment">#&#125;</span></div><div class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</div><div class="line">        <span class="attribute">location</span> = /50x.html &#123;</div><div class="line">            <span class="attribute">root</span>   html;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这里的流程就是,外网通过访问公网ip+给定的端口,在路由根据映射规则,再访问到我这台电脑,这个时候请求不是直接去访问本机的接口,而是进入了Nginx,在这里,会去检查请求的url是否与配置允许的地址相同,不同的话就会403 Forbidden错误啦,当uri是<code>/test/processe</code>时,就能访问实际代理的<code>http://192.168.4.48:8080/test/processe</code>接口了</p>
<p>那这样就可以让对面只能访问指定的接口.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    &lt;strong&gt;前几天接到个任务,要和另一家公司对接,具体就是我这开一个接口给对面调用.因为一开始在内网测试,那问题来了,怎么才能让对面访问到呢?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​        当然是找运维大兄弟…..操作也很简单,就是用路由做一个端口映射,用公网ip做一个端口映射到我本机地址.这样外网就能访问到我的tomcat了.&lt;/p&gt;
&lt;p&gt;比如说公网ip是&lt;code&gt;192.168.1.0&lt;/code&gt;,我的ip是&lt;code&gt;192.168.1.1&lt;/code&gt;,tomcat端口是8080.&lt;/p&gt;
&lt;p&gt;那就在路由上配一个端口9876直接映射到本地tomcat 192.168.1.1:8080.那现在外网就可以通过&lt;code&gt;http://192.168.1.0:9876/&lt;/code&gt;访问到本地&lt;code&gt;http://192.168.1.1:8080/&lt;/code&gt;了.&lt;/p&gt;
&lt;p&gt;就这样,做好了接口,问题又来了,因为这个接口是在核心系统里,那这样就会把所有的接口都暴露了,肯定不行..&lt;/p&gt;
    
    </summary>
    
      <category term="开发随记" scheme="http://fireyao.me/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="开发随记" scheme="http://fireyao.me/tags/%E5%BC%80%E5%8F%91%E9%9A%8F%E8%AE%B0/"/>
    
      <category term="Nginx" scheme="http://fireyao.me/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Java8-新特性-Stream</title>
    <link href="http://fireyao.me/2017/08/20/Java8-%E6%96%B0%E7%89%B9%E6%80%A7-Stream/"/>
    <id>http://fireyao.me/2017/08/20/Java8-新特性-Stream/</id>
    <published>2017-08-20T06:09:12.000Z</published>
    <updated>2017-08-21T01:24:50.079Z</updated>
    
    <content type="html"><![CDATA[<h3 id="了解Stream"><a href="#了解Stream" class="headerlink" title="了解Stream"></a>了解Stream</h3><p>​    Java8中有两个最为重要的改变，一个是Lambda表达式，另一个就是<strong>Stream API</strong>,针对常见的集合数据处理，Stream API 提供了一种高效且易于使用的数据处理方式。</p>
<h3 id="什么是Stream"><a href="#什么是Stream" class="headerlink" title="什么是Stream"></a>什么是Stream</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>​    流(Stream)用于操作数据源所生成的元素序列。Java 8给Collection接口增加了两个默认方法，它们可以返回一个Stream</p>
<blockquote>
<p>default Stream<e> stream() {<br>​    return StreamSupport.stream(spliterator(), false);<br>}//stream()返回的是一个顺序流</e></p>
<p>default Stream<e> parallelStream() {<br>​    return StreamSupport.stream(spliterator(), true);<br>}//parallelStream()返回的是一个并发流</e></p>
</blockquote>
<ol>
<li><strong>Stream 自己不会存储元素。</strong></li>
<li><strong>Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。</strong></li>
<li><strong>Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。</strong></li>
</ol>
<a id="more"></a>
<h4 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h4><p>首先这里有一个Employee类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">   <span class="keyword">private</span> String name;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">double</span> salary;</div><div class="line">   <span class="comment">/*省略getter setter Constructor*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Employee列表</span></div><div class="line">List&lt;Employee&gt; emps = Arrays.asList(</div><div class="line">      <span class="keyword">new</span> Employee(<span class="number">102</span>, <span class="string">"李四"</span>, <span class="number">59</span>, <span class="number">6666.66</span>),</div><div class="line">      <span class="keyword">new</span> Employee(<span class="number">101</span>, <span class="string">"张三"</span>, <span class="number">18</span>, <span class="number">9999.99</span>),</div><div class="line">      <span class="keyword">new</span> Employee(<span class="number">103</span>, <span class="string">"王五"</span>, <span class="number">28</span>, <span class="number">3333.33</span>),</div><div class="line">      <span class="keyword">new</span> Employee(<span class="number">104</span>, <span class="string">"赵六"</span>, <span class="number">20</span>, <span class="number">7777.77</span>),</div><div class="line">      <span class="keyword">new</span> Employee(<span class="number">104</span>, <span class="string">"赵六"</span>, <span class="number">19</span>, <span class="number">7777.77</span>),</div><div class="line">      <span class="keyword">new</span> Employee(<span class="number">104</span>, <span class="string">"赵四"</span>, <span class="number">40</span>, <span class="number">7777.77</span>),</div><div class="line">      <span class="keyword">new</span> Employee(<span class="number">105</span>, <span class="string">"田七"</span>, <span class="number">38</span>, <span class="number">5555.55</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
<p>返回薪资大于5000的员工列表,java8以前是这样做的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">List&lt;Employee&gt; newEmps = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"><span class="keyword">for</span>(Employee emp : emps)&#123;</div><div class="line">  <span class="keyword">if</span>(emp.salary &gt; <span class="number">5000.00</span>)&#123;</div><div class="line">    newEmps.add(emp);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用Stream API ,代码可以这样</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;Employee&gt; newEmps = emps.stream()</div><div class="line">        .filter(s -&gt; s.getSalary() &gt; <span class="number">5000.00</span>)</div><div class="line">        .collect(Collectors.toList());</div></pre></td></tr></table></figure>
<p>先通过stream()得到一个Stream对象，然后调用Stream上的方法，filter()过滤得到薪资大于5000的,它的返回值依然是一个Stream,然后通过调用collect()方法并传递一个Collectors.toList()将结果集存放到一个List中.</p>
<p>使用Stream API处理集合类代码更加简洁易读.</p>
<p>下面介绍一下Stream中的两种操作</p>
<h4 id="Stream的中间操作和终止操作"><a href="#Stream的中间操作和终止操作" class="headerlink" title="Stream的中间操作和终止操作"></a>Stream的中间操作和终止操作</h4><p><strong>中间操作</strong>:</p>
<p>​    多个 中间操作可以连接起来形成一个 流水线，除非流水线上触发终止操作，否则 中间操作不会执行任何的 处理！而在 终止操作时一次性全部 处理，称为“惰性求值”</p>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">filter(Predicate p)</td>
<td style="text-align:center">接收 Lambda ， 从流中排除某些元素。</td>
</tr>
<tr>
<td style="text-align:center">distinct()</td>
<td style="text-align:center">筛选，通过流所生成元素的 hashCode() 和 equals() 去</td>
</tr>
<tr>
<td style="text-align:center">limit(long maxSize)</td>
<td style="text-align:center">截断流，使其元素不超过给定数量。</td>
</tr>
<tr>
<td style="text-align:center">map(Function f)</td>
<td style="text-align:center">接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</td>
</tr>
<tr>
<td style="text-align:center">flatMap(Function f)</td>
<td style="text-align:center">接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</td>
</tr>
<tr>
<td style="text-align:center">sorted(Comparator comp)</td>
<td style="text-align:center">产生一个新流，其中按比较器顺序排序</td>
</tr>
<tr>
<td style="text-align:center">sorted()</td>
<td style="text-align:center">产生一个新流，其中按自然顺序排序</td>
</tr>
</tbody>
</table>
<p><strong>终止操作</strong>:</p>
<p>​    终端操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如：List、Integer，甚至是 void 。</p>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">forEach(Consumer c)</td>
<td style="text-align:center">内部迭代</td>
</tr>
<tr>
<td style="text-align:center">collect(Collector c)</td>
<td style="text-align:center">将流转换为其他形式。接收一个 Collector接口的实现，用于给Stream中元素做汇总的方法</td>
</tr>
<tr>
<td style="text-align:center">max(Comparator c)</td>
<td style="text-align:center">返回流中最大值</td>
</tr>
<tr>
<td style="text-align:center">min(Comparator c)</td>
<td style="text-align:center">返回流中最小值</td>
</tr>
<tr>
<td style="text-align:center">count()</td>
<td style="text-align:center">返回流中元素总数</td>
</tr>
</tbody>
</table>
<p><strong>收集</strong> : collect(Collector c)方法需要一个Collector 作为参数,Collector 接口中方法的实现决定了如何对流执行收集操作(如收集到 List、Set、Map)。Java8中提供了一个Collectors工具类, 工具中提供了很多静态方法，可以方便地创建常见收集器例</p>
<p>具体方法与实例如下表</p>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">返回类型</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">toList</td>
<td style="text-align:center">List<t></t></td>
<td style="text-align:center">把流中元素收集到List</td>
</tr>
<tr>
<td style="text-align:center">toSet</td>
<td style="text-align:center">Set<t></t></td>
<td style="text-align:center">把流中元素收集到Set</td>
</tr>
<tr>
<td style="text-align:center">toCollection</td>
<td style="text-align:center">Collection<t></t></td>
<td style="text-align:center">把流中元素收集到创建的集合</td>
</tr>
<tr>
<td style="text-align:center">groupingBy</td>
<td style="text-align:center">Map<k, list<t="">&gt;</k,></td>
<td style="text-align:center">根据某属性值对流分组，属性为K，结果为V</td>
</tr>
<tr>
<td style="text-align:center">partitioningBy</td>
<td style="text-align:center">Map<boolean, list<t="">&gt;</boolean,></td>
<td style="text-align:center">根据true或false进行分区</td>
</tr>
</tbody>
</table>
<p>这里只列出了一些常用的方法.具体参考Java8 Stream API</p>
<h3 id="Stream-API-使用"><a href="#Stream-API-使用" class="headerlink" title="Stream API 使用"></a>Stream API 使用</h3><h4 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h4><ol>
<li><p>映射(map/flatMap)</p>
<blockquote>
<p>map——接收 Lambda ， 将元素转换成其他形式或提取信息。接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</p>
<p><code>&lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper);</code></p>
<p>map操作会将流里的每个元素按mapper转换后的结果(不管是) 添加到一个新流中.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">"1,2"</span>, <span class="string">"3,4"</span>);</div><div class="line"><span class="comment">//每次mapper操作返回一个数组,将每个数组添加到新流中,最终生成Stream&lt;String[]&gt;</span></div><div class="line">Stream&lt;String[]&gt; stream = list.stream().map(s -&gt; s.split(<span class="string">","</span>));</div><div class="line"><span class="comment">//每次mapper操作返回一个流Stream&lt;String&gt;,将每个流添加到新流中,最终生成Stream&lt;Stream&lt;String&gt;&gt;</span></div><div class="line">Stream&lt;Stream&lt;String&gt;&gt; streamStream = list.stream().map(s -&gt; Arrays.stream(s.split(<span class="string">","</span>)));</div></pre></td></tr></table></figure>
<blockquote>
<p>flatMap——接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</p>
<p><code>&lt;R&gt; Stream&lt;R&gt; flatMap(Function&lt;? super T, ? extends Stream&lt;? extends R&gt;&gt; mapper)</code></p>
<p>它接受一个函数mapper，对流中的每一个元素，mapper会将该元素转换为一个流Stream，然后把新生成流的每一个元素传递给下一个操作.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">"1,2"</span>, <span class="string">"3,4"</span>);</div><div class="line"><span class="comment">//每次mapper操作返回一个流Stream&lt;String&gt; 然后将流里的每个元素添加到新流中,最终生成Stream&lt;String&gt;</span></div><div class="line">Stream&lt;String&gt; stringStream = list.stream().flatMap(s -&gt; Arrays.stream(s.split(<span class="string">","</span>)));</div></pre></td></tr></table></figure>
<blockquote>
<p>flatMap 把 Stream 中的层级结构扁平化，就是将最底层元素抽出来放到一起，最终生成的新 Stream 里面都是直接的字符串。</p>
</blockquote>
</li>
<li><p>排序(sort)</p>
<blockquote>
<p>sorted() ——自然排序(根据流中元素实现的Comparable接口的compareTo()方法来排序的)</p>
<p>sorted(Comparator com) ——定制排序(根据特定的比较器来排序)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">5</span>);</div><div class="line">Stream&lt;Integer&gt; sorted = list.stream().sorted();</div><div class="line">sorted.forEach(System.out::print);</div><div class="line"><span class="comment">/*</span></div><div class="line"> 输出结果: 0134589</div><div class="line">*/</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">emps.stream()</div><div class="line">        .sorted((x, y) -&gt; &#123;</div><div class="line">            <span class="keyword">if</span> (x.getAge() == y.getAge()) &#123;</div><div class="line">                <span class="keyword">return</span> x.getName().compareTo(y.getName());</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> Integer.compare(x.getAge(), y.getAge());</div><div class="line">            &#125;</div><div class="line">        &#125;).forEach(System.out::println);</div><div class="line"><span class="comment">/*</span></div><div class="line">	指定比较规则,按姓名排序,姓名相同的再根据年龄排序</div><div class="line">*/</div></pre></td></tr></table></figure>
</li>
<li><p>筛选与切片</p>
<blockquote>
<p>filter : 接受Lambda,从流中排除某些元素</p>
<p>limit(n) : 返回流中前n个元素</p>
<p>skip(n) : 跳过流中前n个元素</p>
<p>distinct : 去掉流中重复元素(通过hashCode和equles方法判断是否为相同对象)</p>
</blockquote>
<p><strong>filter</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 筛选出姓赵的员工</span></div><div class="line">Stream&lt;Employee&gt; resultStream = emps.stream()</div><div class="line">        .filter(employee -&gt;</div><div class="line">                employee.getName().startsWith(<span class="string">"赵"</span>));</div><div class="line">resultStream.forEach(System.out::println);</div><div class="line"><span class="comment">/*</span></div><div class="line">	输出结果:</div><div class="line">	Employee [id=104, name=赵六, age=20, salary=7777.77]</div><div class="line">	Employee [id=104, name=赵六, age=19, salary=7777.77]</div><div class="line">	Employee [id=104, name=赵四, age=40, salary=7777.77]</div><div class="line">*/</div></pre></td></tr></table></figure>
<p><strong>limit</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取列表前3个员工</span></div><div class="line">Stream&lt;Employee&gt; limit = emps.stream().limit(<span class="number">3</span>);</div><div class="line">limit.forEach(System.out::println);</div><div class="line"><span class="comment">/*</span></div><div class="line">	Employee [id=102, name=李四, age=59, salary=6666.66]</div><div class="line">	Employee [id=101, name=张三, age=18, salary=9999.99]</div><div class="line">	Employee [id=103, name=王五, age=28, salary=3333.33]</div><div class="line">*/</div></pre></td></tr></table></figure>
<p><strong>skin</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//去掉前3个员工</span></div><div class="line">Stream&lt;Employee&gt; limit = emps.stream().skip(<span class="number">3</span>);</div><div class="line">limit.forEach(System.out::println);</div><div class="line"><span class="comment">/*</span></div><div class="line">	Employee [id=104, name=赵六, age=20, salary=7777.77]</div><div class="line">	Employee [id=104, name=赵六, age=19, salary=7777.77]</div><div class="line">	Employee [id=104, name=赵四, age=40, salary=7777.77]</div><div class="line">	Employee [id=105, name=田七, age=38, salary=5555.55]</div><div class="line">*/</div></pre></td></tr></table></figure>
<p><strong>distinct</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</div><div class="line">Stream&lt;Integer&gt; distinct = list.stream().distinct();<span class="comment">//去掉重复元素</span></div><div class="line">distinct.forEach(System.out::print);</div><div class="line"><span class="comment">/*</span></div><div class="line">	123456</div><div class="line">*/</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="终止操作"><a href="#终止操作" class="headerlink" title="终止操作"></a>终止操作</h4><ol>
<li><p>查找与匹配</p>
<blockquote>
<p>allMatch——检查是否匹配所有元素<br>anyMatch——检查是否至少匹配一个元素<br>noneMatch——检查是否没有匹配的元素<br>findFirst——返回第一个元素<br>findAny——返回当前流中的任意元素<br>count——返回流中元素的总个数<br>max——返回流中最大值<br>min——返回流中最小值</p>
</blockquote>
<p><strong>allMatch</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</div><div class="line"><span class="keyword">boolean</span> b = list.stream().allMatch(i -&gt; i &lt; <span class="number">10</span>);<span class="comment">//检查所有元素是否都小于10</span></div><div class="line"><span class="comment">//true</span></div></pre></td></tr></table></figure>
<p><strong>anyMatch</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</div><div class="line"><span class="keyword">boolean</span> b = list.stream().anyMatch(i -&gt; i &lt; <span class="number">2</span>);<span class="comment">//检查是否至少有一个元素小于2</span></div><div class="line"><span class="comment">//true</span></div></pre></td></tr></table></figure>
<p><strong>noneMatch</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</div><div class="line"><span class="keyword">boolean</span> b = list.stream().noneMatch(i -&gt; i &lt; <span class="number">2</span>);<span class="comment">//检查是否没有一个元素小于2</span></div><div class="line"><span class="comment">//false</span></div></pre></td></tr></table></figure>
<p><strong>findFirst</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//返回list第一个元素</span></div><div class="line">Optional&lt;Integer&gt; any = list.stream().findFirst();</div><div class="line">System.out.println(any.get());</div></pre></td></tr></table></figure>
<blockquote>
<p><code>Optional&lt;T&gt;</code> 类是一个是一个容器类,代表一个值存在或不存在,原来用 null 表示一个值不存在,现在<code>Optional&lt;T&gt;</code>可以更好的表达这个概念,并且可以避免空指针异常</p>
<p>这里findFirst()查找第一个元素有可能为空,就把结果封装成一个Optional类.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</div><div class="line"><span class="keyword">long</span> count = list.stream().count();<span class="comment">//统计元素个数</span></div><div class="line">System.out.println(count);<span class="comment">//6</span></div><div class="line">Optional&lt;Integer&gt; max = list.stream().max(Integer::compareTo);<span class="comment">//最大值</span></div><div class="line">System.out.println(max.get());<span class="comment">//6</span></div><div class="line">Optional&lt;Integer&gt; min = list.stream().min(Integer::compareTo);<span class="comment">//最小值</span></div><div class="line">System.out.println(min.get());<span class="comment">//1</span></div></pre></td></tr></table></figure>
</li>
<li><p>规约(reduce)</p>
<blockquote>
<p>`reduce(T identity, BinaryOperator bo) / reduce(BinaryOperator) ——可以将流中元素按照指定的二院运算反复结合起来，得到一个值</p>
<p>identity : 起始值</p>
<p>BinaryOperator  : 二元运算</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>);</div><div class="line">Integer sum = list.stream()</div><div class="line">   .reduce(<span class="number">0</span>, (x, y) -&gt; x + y);</div><div class="line">System.out.println(sum);</div><div class="line"><span class="comment">/*</span></div><div class="line">	输出结果 55</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>这里reduce操作中,起始值为0,第一次x为0,list中第一个元素1为y 经行(x+y)操作,然后又把(x+y)的值作为x, list中第二个元素2作为y,依次累加.最终得到一个sum值</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Optional&lt;Double&gt; op = emps.stream()</div><div class="line">   .map(Employee::getSalary)</div><div class="line">   .reduce(Double::sum);<span class="comment">//计算所有员工薪资总和</span></div><div class="line">System.out.println(op.get());</div></pre></td></tr></table></figure>
<blockquote>
<p>这个地方由于没有初始值,计算结果可能为空(列表为空的情况),所以就把计算结果封装到Optional中避免空指针异常</p>
</blockquote>
</li>
<li><p>收集(collect)</p>
<blockquote>
<p>collect——将流转换为其他形式。接收一个 Collector接口的实现，用于给Stream中元素做汇总的方法</p>
<p><code>&lt;R, A&gt; R collect(Collector&lt;? super T, A, R&gt; collector);</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//收集员工姓名到List集合</span></div><div class="line">List&lt;String&gt; list = emps.stream()</div><div class="line">   .map(Employee::getName)</div><div class="line">   .collect(Collectors.toList());</div><div class="line">list.forEach(System.out::print);</div><div class="line"><span class="comment">// 输出: 李四张三王五赵六赵六赵六田七</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//收集员工姓名到Set集合</span></div><div class="line">Set&lt;String&gt; set = emps.stream()</div><div class="line">   .map(Employee::getName)</div><div class="line">   .collect(Collectors.toSet());</div><div class="line">set.forEach(System.out::println);</div><div class="line"><span class="comment">// 输出 : 李四张三王五赵六田七</span></div><div class="line"><span class="comment">//------------------------------------</span></div><div class="line">HashSet&lt;String&gt; hs = emps.stream()</div><div class="line">    .map(Employee::getName)</div><div class="line">    .collect(Collectors.toCollection(HashSet::<span class="keyword">new</span>));</div><div class="line">hs.forEach(System.out::println);</div><div class="line"><span class="comment">// 输出 : 李四张三王五赵六田七</span></div></pre></td></tr></table></figure>
</li>
<li><p>分组</p>
<blockquote>
<p>groupingBy : 根据指定的元素对流中数据进行分组</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//按照员工姓氏分组,这里不考虑复姓</span></div><div class="line">Map&lt;String, List&lt;Employee&gt;&gt; collect = emps.stream()</div><div class="line">        .collect(Collectors</div><div class="line">                .groupingBy(emp -&gt; String.valueOf(emp.getName().charAt(<span class="number">0</span>))));</div><div class="line">collect.forEach((k, v) -&gt; &#123;</div><div class="line">    System.out.println(k + <span class="string">":"</span> + v);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>输出结果为:</p>
<p>田:[Employee [id=105, name=田七, age=38, salary=5555.55]</p>
<p>张:[Employee [id=101, name=张三, age=18, salary=9999.99]</p>
<p>赵:[Employee [id=104, name=赵六, age=20, salary=7777.77], </p>
<p>​     Employee [id=104, name=赵六, age=19, salary=7777.77], </p>
<p>​     Employee [id=104, name=赵四, age=40, salary=7777.77]]</p>
<p>王:[Employee [id=103, name=王五, age=28, salary=3333.33]<br>李:[Employee [id=102, name=李四, age=59, salary=6666.66]</p>
</blockquote>
</li>
<li><p>分区</p>
<blockquote>
<p>partitioningBy : 按照给定条件对流中元素进行分区</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将员工以薪资6000.00为界限分区</span></div><div class="line">Map&lt;Boolean, List&lt;Employee&gt;&gt; collect = emps.stream()</div><div class="line">        .collect(Collectors.partitioningBy(e -&gt; e.getSalary() &gt; <span class="number">6000.00</span>));</div><div class="line">collect.forEach((k, v) -&gt; &#123;</div><div class="line">    System.out.println(k + <span class="string">":"</span> + v);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>输出结果为:</p>
<p>false:[Employee [id=103, name=王五, age=28, salary=3333.33], </p>
<p>​    Employee [id=105, name=田七, age=38, salary=5555.55]]</p>
<p>true:[Employee [id=102, name=李四, age=59, salary=6666.66], </p>
<p>​    Employee [id=101, name=张三, age=18, salary=9999.99], </p>
<p>​    Employee [id=104, name=赵六, age=20, salary=7777.77], </p>
<p>​    Employee [id=104, name=赵六, age=19, salary=7777.77], </p>
<p>​    Employee [id=104, name=赵四, age=40, salary=7777.77]]</p>
</blockquote>
</li>
</ol>
<h3 id="Optional-类"><a href="#Optional-类" class="headerlink" title="Optional 类"></a>Optional 类</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><blockquote>
<p>Optional 容器类：用于尽量避免空指针异常</p>
</blockquote>
<p><strong>方法</strong></p>
<blockquote>
<p>Optional 容器类：用于尽量避免空指针异常</p>
<p>Optional.of(T t) : 创建一个 Optional 实例</p>
<p>Optional.empty() : 创建一个空的 Optional 实例</p>
<p>Optional.ofNullable(T t):若 t 不为 null,创建 Optional 实例,否则创建空实例</p>
<p>isPresent() : 判断是否包含值</p>
<p>orElse(T t) :  如果调用对象包含值，返回该值，否则返回t</p>
<p>orElseGet(Supplier s) :如果调用对象包含值，返回该值，否则返回 s 获取的值</p>
<p>map(Function f): 如果有值对其处理，并返回处理后的Optional，否则返回 Optional.empty()</p>
<p>flatMap(Function mapper):与 map 类似，要求返回值必须是Optional</p>
</blockquote>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote>
<p>Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。</p>
<p>简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;了解Stream&quot;&gt;&lt;a href=&quot;#了解Stream&quot; class=&quot;headerlink&quot; title=&quot;了解Stream&quot;&gt;&lt;/a&gt;了解Stream&lt;/h3&gt;&lt;p&gt;​    Java8中有两个最为重要的改变，一个是Lambda表达式，另一个就是&lt;strong&gt;Stream API&lt;/strong&gt;,针对常见的集合数据处理，Stream API 提供了一种高效且易于使用的数据处理方式。&lt;/p&gt;
&lt;h3 id=&quot;什么是Stream&quot;&gt;&lt;a href=&quot;#什么是Stream&quot; class=&quot;headerlink&quot; title=&quot;什么是Stream&quot;&gt;&lt;/a&gt;什么是Stream&lt;/h3&gt;&lt;h4 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h4&gt;&lt;p&gt;​    流(Stream)用于操作数据源所生成的元素序列。Java 8给Collection接口增加了两个默认方法，它们可以返回一个Stream&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;default Stream&lt;e&gt; stream() {&lt;br&gt;​    return StreamSupport.stream(spliterator(), false);&lt;br&gt;}//stream()返回的是一个顺序流&lt;/e&gt;&lt;/p&gt;
&lt;p&gt;default Stream&lt;e&gt; parallelStream() {&lt;br&gt;​    return StreamSupport.stream(spliterator(), true);&lt;br&gt;}//parallelStream()返回的是一个并发流&lt;/e&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Stream 自己不会存储元素。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Java" scheme="http://fireyao.me/categories/Java/"/>
    
    
      <category term="Java" scheme="http://fireyao.me/tags/Java/"/>
    
      <category term="Java8" scheme="http://fireyao.me/tags/Java8/"/>
    
      <category term="Stream" scheme="http://fireyao.me/tags/Stream/"/>
    
  </entry>
  
  <entry>
    <title>Java8 新特性 函数式接口</title>
    <link href="http://fireyao.me/2017/08/06/Java8-%E6%96%B0%E7%89%B9%E6%80%A7-%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/"/>
    <id>http://fireyao.me/2017/08/06/Java8-新特性-函数式接口/</id>
    <published>2017-08-06T03:55:03.000Z</published>
    <updated>2017-08-21T01:24:50.088Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是函数式接口"><a href="#什么是函数式接口" class="headerlink" title="什么是函数式接口"></a>什么是函数式接口</h3><p>​    <strong>Java 8引入了函数式接口的概念</strong></p>
<p>​    1). 只包含一个抽象方法的接口，称为<strong>函数式接口</strong></p>
<p>​    2). 函数式接口可以被隐式转换为lambda表达式。</p>
<p>​    3). 在任意函数式接口上使用@FunctionalInterface注解，这样做可以检查它是否是一个函数式接口，同时javadoc 也会包含一条声明，说明这个接口是一个函数式接口。</p>
<a id="more"></a>
<h3 id="预定义的函数式接口"><a href="#预定义的函数式接口" class="headerlink" title="预定义的函数式接口"></a>预定义的函数式接口</h3><p>​    Java 8定义了大量的预定义函数式接口，用于常见类型的代码传递，这些函数定义在包java.util.function下，</p>
<p>其中有四大核心函数式接口。</p>
<table>
<thead>
<tr>
<th style="text-align:center">函数式接口</th>
<th style="text-align:center">参数类型</th>
<th style="text-align:center">返回类型</th>
<th style="text-align:center">用途</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Consumer<t>(消费型接口)</t></td>
<td style="text-align:center">T</td>
<td style="text-align:center">void</td>
<td style="text-align:center">对类型为T的对象应用操作。void accept(T t)</td>
</tr>
<tr>
<td style="text-align:center">Supplier<t>(供给型接口)</t></td>
<td style="text-align:center">无</td>
<td style="text-align:center">T</td>
<td style="text-align:center">返回类型为T的对象。 T get();</td>
</tr>
<tr>
<td style="text-align:center">Function<t, r="">(函数型接口)</t,></td>
<td style="text-align:center">T</td>
<td style="text-align:center">R</td>
<td style="text-align:center">对类型为T的对象应用操作并返回R类型的对象。R apply(T t);</td>
</tr>
<tr>
<td style="text-align:center">Predicate<t>(断言型接口)</t></td>
<td style="text-align:center">T</td>
<td style="text-align:center">boolean</td>
<td style="text-align:center">确定类型为T的对象是否满足约束。boolean test(T t);</td>
</tr>
</tbody>
</table>
<p><strong>Consumer<t> 消费型接口</t></strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">(<span class="keyword">double</span> money, Consumer&lt;Double&gt; con)</span></span>&#123;</div><div class="line">	con.accept(money);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	consume(<span class="number">10000</span>, (m) -&gt; &#123;</div><div class="line">    	System.out.println(<span class="string">"今日全场8折"</span>);</div><div class="line">        System.out.println(<span class="string">"顾客消费："</span> + (m * <span class="number">0.8</span>) + <span class="string">"元"</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Supplier<t> 供给型接口</t></strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//生成num个整数,并存入集合</span></div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getNumList</span><span class="params">(<span class="keyword">int</span> num, Supplier&lt;Integer&gt; sup)</span> </span>&#123;</div><div class="line">	List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</div><div class="line">			Integer n = sup.get();</div><div class="line">			list.add(n);</div><div class="line">		&#125;</div><div class="line">	<span class="keyword">return</span> list;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	<span class="comment">//10个100以内的随机数</span></div><div class="line">	List&lt;Integer&gt; numList = getNumList(<span class="number">10</span>, () -&gt; (<span class="keyword">int</span>) (Math.random() * <span class="number">100</span>));</div><div class="line">  	<span class="keyword">for</span> (Integer num : numList) &#123;</div><div class="line">    	System.out.println(num);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Function<t, r=""> 函数型接口</t,></strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">	Function接口常用于数据的处理转换,比如给定一个员工列表,需要返回名称列表</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line"> 	<span class="keyword">private</span> <span class="keyword">double</span> salary;</div><div class="line">  	<span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">  	&#125;</div><div class="line">  	<span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name,<span class="keyword">double</span> salary)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.salary = salary;</div><div class="line">	&#125;</div><div class="line">  	<span class="comment">//省略getter setter</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEmp</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;T, R&gt;<span class="function">List&lt;R&gt; <span class="title">map</span><span class="params">(List&lt;T&gt; list,Function&lt;T, R&gt; fun)</span></span>&#123;</div><div class="line">    	List&lt;R&gt; returnList = <span class="keyword">new</span> ArrayList&lt;&gt;(list.size());</div><div class="line">    	<span class="keyword">for</span> (T e : list) &#123;</div><div class="line">			returnList.add(fun.apply(e));</div><div class="line">      	&#125;</div><div class="line">    	<span class="keyword">return</span> returnList</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		List&lt;Employee&gt; employees = Arrays.asList(<span class="keyword">new</span> Employee(<span class="string">"老张"</span>),</div><div class="line">				<span class="keyword">new</span> Employee(<span class="string">"小李"</span>),</div><div class="line">        		<span class="keyword">new</span> Employee(<span class="string">"老王"</span>),</div><div class="line">                <span class="keyword">new</span> Employee(<span class="string">"小刘"</span>),</div><div class="line">                <span class="keyword">new</span> Employee(<span class="string">"小胖"</span>));</div><div class="line">		List&lt;String&gt; nameList = map(employees, (employee -&gt; employee.getName()));</div><div class="line">		System.out.println(nameList);</div><div class="line">      	<span class="comment">/*</span></div><div class="line">      		console:[老张, 小李, 老王, 小刘, 小胖]</div><div class="line">      	*/</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Predicate<t> 断言型接口</t></strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">filter</span><span class="params">(List&lt;E&gt; list, Predicate&lt;E&gt; pred)</span> </span>&#123;</div><div class="line">	List&lt;E&gt; retList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    	<span class="keyword">for</span> (E e : list) &#123;</div><div class="line">        	<span class="keyword">if</span> (pred.test(e)) &#123;</div><div class="line">                retList.add(e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">	<span class="keyword">return</span> retList;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		List&lt;Employee&gt; employees = Arrays.asList(<span class="keyword">new</span> Employee(<span class="string">"老张"</span>),</div><div class="line">    			<span class="keyword">new</span> Employee(<span class="string">"小李"</span>, <span class="number">3000.00</span>),</div><div class="line">                <span class="keyword">new</span> Employee(<span class="string">"老王"</span>, <span class="number">5000.00</span>),</div><div class="line">                <span class="keyword">new</span> Employee(<span class="string">"小刘"</span>, <span class="number">7000.00</span>),</div><div class="line">                <span class="keyword">new</span> Employee(<span class="string">"小胖"</span>, <span class="number">10000.00</span>));</div><div class="line">  		<span class="comment">//过滤薪资小于5000的员工</span></div><div class="line">      	List&lt;Employee&gt; filter = filter(employees,</div><div class="line">                                       employee -&gt; employee.getSalary() &gt; <span class="number">5000.00</span>);</div><div class="line">        <span class="keyword">for</span> (Employee employee : filter) &#123;</div><div class="line">            System.out.println(employee.getName() + <span class="string">":"</span> + employee.getSalary());</div><div class="line">        &#125;</div><div class="line">      	<span class="comment">/*</span></div><div class="line">      		console:小刘:7000.0</div><div class="line">      				小胖:10000.0</div><div class="line">      	*/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><p>​    当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！方法引用：使用操作符 <code>::</code>将方法名和对象或类的名字分隔开来。如下三种主要使用情况 ：</p>
<p><strong>对象 : : 实例方法</strong></p>
<p><strong>类 : : 静态方法</strong></p>
<p><strong>类 : : 实例方法</strong></p>
<p><strong>基本用法</strong></p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//静态方法</span></div><div class="line">BinaryOperator&lt;Double&gt; binaryOperator = (x, y) -&gt; Math.pow(x, y);</div><div class="line"><span class="comment">//等价于</span></div><div class="line">BinaryOperator&lt;Double&gt; binaryOperator = Math::pow;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实例方法: 类::实例方法</span></div><div class="line">Function&lt;Employee, String&gt; f = (Employee e) -&gt; e.getName();</div><div class="line"><span class="comment">//等价于</span></div><div class="line">Function&lt;Employee, String&gt; f = Employee::getName;</div><div class="line"><span class="comment">//---------------------------------------------------------</span></div><div class="line"><span class="comment">//对象::实例方法</span></div><div class="line">Employee e = <span class="keyword">new</span> Employee(<span class="string">"小李"</span>, <span class="number">3000.00</span>);</div><div class="line">Supplier&lt;String&gt; s = () -&gt; e.getName();</div><div class="line"><span class="comment">//等价于↓</span></div><div class="line">Supplier&lt;String&gt; s = e::getName;</div></pre></td></tr></table></figure>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>​    与函数式接口相结合，自动与函数式接口中方法兼容。可以把构造器引用赋值给定义的方法，与构造器参数<br>列表要与接口中抽象方法的参数列表一致！对于构造方法，方法引用的语法是&lt;类名&gt;::new，如<code>Employee::new</code>，如下语句：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Function&lt;String,Employee&gt; f = (name)-&gt;<span class="keyword">new</span> Employee(name);</div><div class="line"><span class="comment">//等价于↓</span></div><div class="line">Function&lt;String, Employee&gt; f = Employee::<span class="keyword">new</span>;</div></pre></td></tr></table></figure>
<h3 id="接口中的默认方法和静态方法"><a href="#接口中的默认方法和静态方法" class="headerlink" title="接口中的默认方法和静态方法"></a>接口中的默认方法和静态方法</h3><p>​    Java8以前，接口里的方法要求全部是抽象方法，Java8以后允许在接口里定义<strong>默认方法</strong>和<strong>静态方法</strong>,默认方法使用 <strong>default</strong> 关键字修饰。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyFunction</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>;</div><div class="line">  <span class="comment">//声明一个接口的默认方法</span></div><div class="line">  <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">testDefalut</span><span class="params">()</span></span>&#123;</div><div class="line">    System.out.println(<span class="string">"MyFunction 默认方法"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//声明一个接口的静态方法</span></div><div class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testStatic</span><span class="params">()</span></span>&#123;</div><div class="line">    System.out.println(<span class="string">"MyFunction 静态方法"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MyFunctionImpl实现接口MyFunction</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFunctionImpl</span> <span class="keyword">implements</span> <span class="title">MyFunction</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"实现抽象方法"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        MyFunction my = <span class="keyword">new</span> MyFunctionImpl();</div><div class="line">        my.func();</div><div class="line">        my.testDefalut();</div><div class="line">        MyFunction.testStatic();</div><div class="line">    &#125;</div><div class="line">  <span class="comment">/*</span></div><div class="line">      		实现抽象方法</div><div class="line">            MyFunction 默认方法</div><div class="line">            MyFunction 静态方法</div><div class="line">  */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>默认方法的主要优势是提供一种拓展接口的方法，而不破坏现有代码。</strong></p>
<h3 id="接口冲突"><a href="#接口冲突" class="headerlink" title="接口冲突"></a>接口冲突</h3><p>​    如果一个父接口提供一个默认方法，而另一个接口也提供了一个具有相同名称和参数列表的方法（不管方法是否是默认方法），那么必须覆盖该方法来解决冲突</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AnotherFunction</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">testDefalut</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"AnotherFunction 默认方法"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionImpl</span> <span class="keyword">implements</span> <span class="title">MyFunction</span>,<span class="title">AnotherFunction</span></span>&#123;</div><div class="line">  	<span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">" FunctionImpl 实现抽象方法"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  	<span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDefalut</span><span class="params">()</span> </span>&#123;</div><div class="line">		 System.out.println(<span class="string">" FunctionImpl 覆盖接口中默认方法解决冲突"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​    如果不覆盖接口中相同的默认方法，那么<code>new MyFunctionImpl().testDefalut();</code>中调用的testDefalut方法到底是哪个接口的testDefalut()方法呢？所以必须在实现类中覆盖testDefalut()方法。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>​    本章中介绍了Java 8中的函数式接口，Java8四大核心函数式接口，方法的引用，接口的默认方法和静态方法。</p>
<p>下章将介绍Java8中强大的<strong>Stream API</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是函数式接口&quot;&gt;&lt;a href=&quot;#什么是函数式接口&quot; class=&quot;headerlink&quot; title=&quot;什么是函数式接口&quot;&gt;&lt;/a&gt;什么是函数式接口&lt;/h3&gt;&lt;p&gt;​    &lt;strong&gt;Java 8引入了函数式接口的概念&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​    1). 只包含一个抽象方法的接口，称为&lt;strong&gt;函数式接口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​    2). 函数式接口可以被隐式转换为lambda表达式。&lt;/p&gt;
&lt;p&gt;​    3). 在任意函数式接口上使用@FunctionalInterface注解，这样做可以检查它是否是一个函数式接口，同时javadoc 也会包含一条声明，说明这个接口是一个函数式接口。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://fireyao.me/categories/Java/"/>
    
    
      <category term="Java" scheme="http://fireyao.me/tags/Java/"/>
    
      <category term="Java8" scheme="http://fireyao.me/tags/Java8/"/>
    
      <category term="函数式接口" scheme="http://fireyao.me/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>Java8 新特性 Lambda表达式</title>
    <link href="http://fireyao.me/2017/08/05/Java8-%E6%96%B0%E7%89%B9%E6%80%A7-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://fireyao.me/2017/08/05/Java8-新特性-Lambda表达式/</id>
    <published>2017-08-05T05:18:27.000Z</published>
    <updated>2017-08-21T01:24:50.072Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是Lambda表达式"><a href="#什么是Lambda表达式" class="headerlink" title="什么是Lambda表达式"></a>什么是Lambda表达式</h3><p>  <strong>Lambda</strong>可以理解为是一个<strong>匿名函数</strong>，Lambda表达式可以说是一段可以传递的代码。可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升。</p>
<p>  在Java8以前，我们是通过接口来传递代码的(面向接口的编程)。<br><a id="more"></a><br>  比如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">               System.out.println(<span class="string">"run----"</span>);</div><div class="line">           &#125;</div><div class="line">       &#125;;</div><div class="line"></div><div class="line">Thread th = <span class="keyword">new</span> Thread(runnable);</div></pre></td></tr></table></figure>
<p>这里Thread类需要的其实并不是Runnable对象，而是它的方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<p>但是没有办法直接传递方法，只能通过接口来传递。</p>
<p><strong>Java8</strong>提供了一种新的紧凑的传递代码的语法–就是<strong>Lambda</strong>表达式。比如刚才的Thread可以用lambda表达式修改为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Runnable runnable = (() -&gt; System.out.println(<span class="string">"run----"</span>));</div><div class="line">Thread th = <span class="keyword">new</span> Thread(runnable);</div><div class="line"><span class="comment">//还可以继续简化</span></div><div class="line">Thread t = <span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">"run----"</span>));</div></pre></td></tr></table></figure>
<p>是不是简洁多了？。</p>
<h4 id="1-Lambda表达式语法"><a href="#1-Lambda表达式语法" class="headerlink" title="1.Lambda表达式语法"></a>1.Lambda表达式语法</h4><p>Lambda 表达式在Java 语言中引入了一个新的语法元素和操作符。这个操作符为 <code>-&gt;</code> ， 该操作符被称为 Lambda 操作符或剪头操作符。它将 Lambda 分为两个部分：</p>
<p><strong>左侧:</strong> 指定了 Lambda 表达式所需要的所有参数</p>
<p><strong>右侧:</strong>指定了 Lambda 体，即 Lambda 表达式要执行的功能即需传递的方法的实现。</p>
<p><strong>语法格式:</strong></p>
<p><strong>1). 无参,无返回值,Lambda体只需一条语句</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Runnable runnable = (() -&gt; System.out.println(<span class="string">"run----"</span>));</div></pre></td></tr></table></figure>
<p><strong>2). Lambda需要一个参数</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Consumer&lt;String&gt; consumer = ((str) -&gt; System.out.println(str));</div><div class="line"><span class="comment">//只有一个参数时，参数小括号可以省略，如下</span></div><div class="line">Consumer&lt;String&gt; consumer = (str -&gt; System.out.println(str));</div></pre></td></tr></table></figure>
<p><strong>3). Lambda  需要两个参数，并且有返回值</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Comparator&lt;Integer&gt; comparator = ((num1, num2) -&gt; &#123;</div><div class="line">   <span class="keyword">return</span> num1 - num2;</div><div class="line">&#125;);</div><div class="line"><span class="comment">//当表达式内只有一条语句时，return和大括号可以省略，如下</span></div><div class="line">Comparator&lt;Integer&gt; comparator = ((num1, num2) -&gt; num1 - num2);</div></pre></td></tr></table></figure>
<p><strong>4). 数据类型可以省略，因为可由编译器推断得出，称为“类型推断”</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">BinaryOperator&lt;Long&gt; binaryOperator = ((Long num1, Long num2) -&gt; num1 + num2);</div><div class="line"><span class="comment">//(Long l1, Long l2) 中参数类型可以省略，编译器可以自动推断，如下↓</span></div><div class="line">BinaryOperator&lt;Long&gt; binaryOperator = ((num1, num2) -&gt; num1 + num2);</div></pre></td></tr></table></figure>
<p><strong>可以看出，相比匿名内部类，传递代码变得更为直观，不再有实现接口的模板代码，不再声明方法，也名字也没有，而是直接给出了方法的实现代码</strong></p>
<h4 id="2-变量引用"><a href="#2-变量引用" class="headerlink" title="2.变量引用"></a><strong>2.变量引用</strong></h4><p>​    与匿名内部类类似，Lambda表达式也可以访问定义在主体代码外部的变量，但对于局部变量，它也只能访问final类型的变量，与匿名内部类的区别是，它不要求变量声明为final，但变量事实上不能被重新赋值。比如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Integer num = <span class="number">1</span>;</div><div class="line">Function&lt;Integer, Integer&gt; function = (integer -&gt; num);</div></pre></td></tr></table></figure>
<p>可以访问局部变量num，但num不能被重新赋值，如果这样写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Integer num = <span class="number">1</span>;</div><div class="line">Function&lt;Integer, Integer&gt; function = (integer -&gt; num++);</div><div class="line"><span class="comment">//编译器报错</span></div><div class="line"><span class="comment">//Variable used in lambda expression should be final or effectively final</span></div></pre></td></tr></table></figure>
<h3 id="与匿名内部内比较"><a href="#与匿名内部内比较" class="headerlink" title="与匿名内部内比较"></a>与匿名内部内比较</h3><p>从以上内容可以看出，Lambda表达式与匿名内部类很像，主要就是简化了语法，使得编写更加简单，但Lambda与匿名内部类不同的是，java会为每个匿名内部类生成一个一个类，而Lambda表达式不会。</p>
<p>Lambda表达式不是匿名内部类，那它的类型到底是什么呢？是<strong>函数式接口</strong>。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>​    本章介绍了Lambda表达式，Lambda语法以及在Lambda表达式中的变量引用。</p>
<p>下篇将介绍Java8新特性，<strong>函数式接口</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是Lambda表达式&quot;&gt;&lt;a href=&quot;#什么是Lambda表达式&quot; class=&quot;headerlink&quot; title=&quot;什么是Lambda表达式&quot;&gt;&lt;/a&gt;什么是Lambda表达式&lt;/h3&gt;&lt;p&gt;  &lt;strong&gt;Lambda&lt;/strong&gt;可以理解为是一个&lt;strong&gt;匿名函数&lt;/strong&gt;，Lambda表达式可以说是一段可以传递的代码。可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升。&lt;/p&gt;
&lt;p&gt;  在Java8以前，我们是通过接口来传递代码的(面向接口的编程)。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://fireyao.me/categories/Java/"/>
    
    
      <category term="Java" scheme="http://fireyao.me/tags/Java/"/>
    
      <category term="Java8" scheme="http://fireyao.me/tags/Java8/"/>
    
      <category term="Lambda" scheme="http://fireyao.me/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://fireyao.me/2017/06/21/hello-world/"/>
    <id>http://fireyao.me/2017/06/21/hello-world/</id>
    <published>2017-06-21T05:18:27.000Z</published>
    <updated>2017-08-21T01:24:50.091Z</updated>
    
    <content type="html"><![CDATA[<h3 id="进来你就是我的人了"><a href="#进来你就是我的人了" class="headerlink" title="进来你就是我的人了"></a>进来你就是我的人了</h3><p> <b>一颗赛艇</b><br> 苟利国家生死以<br> 岂因福祸趋避之<br><a id="more"></a></p>
<h3 id="我跟你讲不要搞大新闻"><a href="#我跟你讲不要搞大新闻" class="headerlink" title="我跟你讲不要搞大新闻"></a>我跟你讲不要搞大新闻</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(alive)&#123;</div><div class="line">    your.minit = <span class="number">59</span>s;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你觉得你跑得快是不是</p>
<h3 id="别往下看，没了"><a href="#别往下看，没了" class="headerlink" title="别往下看，没了"></a>别往下看，没了</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/(o_ _)ﾉ</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;进来你就是我的人了&quot;&gt;&lt;a href=&quot;#进来你就是我的人了&quot; class=&quot;headerlink&quot; title=&quot;进来你就是我的人了&quot;&gt;&lt;/a&gt;进来你就是我的人了&lt;/h3&gt;&lt;p&gt; &lt;b&gt;一颗赛艇&lt;/b&gt;&lt;br&gt; 苟利国家生死以&lt;br&gt; 岂因福祸趋避之&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://fireyao.me/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Hello" scheme="http://fireyao.me/tags/Hello/"/>
    
      <category term="膜法" scheme="http://fireyao.me/tags/%E8%86%9C%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+github一步一步搭建个人博客</title>
    <link href="http://fireyao.me/2017/06/21/hexo-github-blog/"/>
    <id>http://fireyao.me/2017/06/21/hexo-github-blog/</id>
    <published>2017-06-21T05:18:27.000Z</published>
    <updated>2017-08-21T01:24:50.095Z</updated>
    
    <content type="html"><![CDATA[<p></p><p>最近用使用Hexo和github搭建了一个个人博客，现在记录下来;<br>Hexo是一个强大的博客框架,这里是<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">中文文档</a></p><br>  <a id="more"></a><p></p>
<h3 id="一、基础博客搭建流程"><a href="#一、基础博客搭建流程" class="headerlink" title="一、基础博客搭建流程"></a><strong>一、基础博客搭建流程</strong></h3><h4 id="安装Node和Git"><a href="#安装Node和Git" class="headerlink" title="安装Node和Git"></a>安装Node和Git</h4><ul>
<li><p>windows：<br>下载Node.js客户端安装即可。<br>在命令行输入node -v出现如下图所示就安装成功了<br><img src="http://oqnan33k8.bkt.clouddn.com/myblog_img/hexo_github_blog/node.png" alt="Alt   text"></p>
</li>
<li><p>下载git(国内直接从官网下载比较困难，需要翻墙。这里提供一个国内的下载站)<a href="https://github.com/waylau/git-for-win" target="_blank" rel="external">download</a><br>  安装正确后 在桌面或文件夹空白处鼠标右键菜单会新增“Git GUI Here”和“Git Bash Here”两个选项。</p>
</li>
</ul>
<h4 id="使用hexo搭建博客"><a href="#使用hexo搭建博客" class="headerlink" title="使用hexo搭建博客"></a>使用hexo搭建博客</h4><ul>
<li><strong>安装全局hexo</strong><br>右键运行Git Bash 执行<code>npm install -g hexo</code>;安装后输入<code>hexo -v</code>,出现版本信息表示安装成功。</li>
<li><strong>在项目中安装hexo</strong><br> 新建文件夹为你的博客项目名，进入项目打开Git Bash<br> <code>npm install hexo --save</code>在项目中安装hexo;<br> <code>hexo init</code>初始化hexo<br> <code>npm install</code>安装hexo所需依赖包</li>
<li><strong>安装hexo插件</strong><br> <code>npm install hexo-server --save</code> 本地服务所需插件<br> <code>npm install hexo-deployer-git --save</code>使用git进行部署所需插件</li>
</ul>
<h4 id="在本地生成博客静态页面并预览"><a href="#在本地生成博客静态页面并预览" class="headerlink" title="在本地生成博客静态页面并预览"></a>在本地生成博客静态页面并预览</h4><p>在项目路径下打开Git Bash</p>
<ul>
<li><strong>在本地生成静态页面</strong><br>  <code>hexo generate</code>,生成一个存放静态文件的文件夹public;该命令可以简写为:<code>hexo g</code></li>
</ul>
<ul>
<li><strong>启动本地服务器</strong><br><code>hexo server</code>,启动服务;简写为<code>hexo s</code>;<br>默认网址为：<code>http://localhost:4000/</code><br>默认端口为4000，如果端口被占用,执行<code>hexo s -p 5000</code>表示指定服务端口为5000。</li>
</ul>
<p>如果以上步骤都不出意外的话，你就会看到一个Hexo博客初始化的页面。</p>
<h3 id="二、GitHub-hexo配置个人博客"><a href="#二、GitHub-hexo配置个人博客" class="headerlink" title="二、GitHub+hexo配置个人博客"></a><strong>二、GitHub+hexo配置个人博客</strong></h3><p> <strong>上面介绍了如何在本地搭建博客，接下来开始配置GitHub并关联Hexo</strong></p>
<ul>
<li><strong>GitHub pages</strong><ol>
<li>首先注册一个GigHub帐号，注册比较简单就不再赘</li>
<li>帐号创建号后，需要创建一个仓库(Respository);<strong>注意:</strong>仓库名字要与GitHub用户名一致,比如我的用户名是FireYao,创建的respository名就是FireYao.github.io</li>
<li>创建好respository后，进入到该respository界面,点击settings拉到最下方找到GitHub Pages,点击 <strong>Launch automatic page generator</strong>,让GitHub生成GitHubPager</li>
</ol>
</li>
</ul>
<ul>
<li><strong>配置SSH Keys</strong><ol>
<li>本地生成ssh密钥。<br>git bash下输入<code>ssh-keygen -t rsa -C ‘你的邮箱地址’</code></li>
<li>上传本地的公钥串，使当前电脑与GitHub账户建立联系。</li>
<li>在你的电脑C：\ Users\你的计算机用户名.ssh目录下打开刚刚生成的id_rsa.pub，复制里面的内容。然后点击你GitHub账户右上角的头像，选择settings，找到SSH and GPG keys，点击进入之后再点击New SSH key，title随便写，把公钥串粘贴到文本框，保存即可</li>
</ol>
</li>
<li><p><strong>在Hexo配置文件中关联GitHub账号</strong></p>
<ol>
<li>在之前搭建好的本地博客项目中编辑<code>_config.yml</code>文件,把其中的deploy参数（没有的话就按如下格式新建，注意冒号后面一定要有一个空格），修改为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">	type: git</div><div class="line">	repo: https://github.com/FireYao/FireYao.github.io.git</div><div class="line">	branch: master</div></pre></td></tr></table></figure>
</li>
</ol>
<p>将其中的FireYao改为你自己的github用户名</p>
<ol>
<li><p>重新部署项目<br>在博客根目录打开Git Bash依次执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean    #会清除缓存文件db.json及之前生成的静态文件夹public；</div><div class="line">hexo g     #会重新生成静态文件夹public；</div><div class="line">hexo deploy    #把本地生成的静态文件部署到FireYao.github.io这个仓库中的master分支上；简写形式为hexo d</div></pre></td></tr></table></figure>
<p><code>hexo g 和 hexo d可以合并在一起写：hexo g -d</code></p>
</li>
<li>在浏览器中访问博客<br>在浏览器中输入<code>FireYao.github.io</code>,没毛病的话，你应该就能看到之前在本地搭建的那个博客页面了。</li>
</ol>
</li>
</ul>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p></p><p><br>  到这里已经通过Hexo创建了一个最原始的博客，并将博客的静态文件存放到github仓库中，通过外网以github的默认域名访问这个博客。<br></p><br><strong>未完待续</strong><p></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p&gt;最近用使用Hexo和github搭建了一个个人博客，现在记录下来;&lt;br&gt;Hexo是一个强大的博客框架,这里是&lt;a href=&quot;https://hexo.io/zh-cn/docs/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;中文文档&lt;/a&gt;&lt;/p&gt;&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://fireyao.me/categories/hexo/"/>
    
    
      <category term="博客" scheme="http://fireyao.me/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="hexo" scheme="http://fireyao.me/tags/hexo/"/>
    
      <category term="github" scheme="http://fireyao.me/tags/github/"/>
    
  </entry>
  
</feed>
