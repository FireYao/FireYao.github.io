{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.b3331d.css","path":"main.b3331d.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/photo.js","path":"photo.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.445162.js","path":"slider.445162.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.b3331d.js","path":"main.b3331d.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.8d90af.js","path":"mobile.8d90af.js","modified":0,"renderable":1},{"_id":"source/assets/img/favicon.png","path":"assets/img/favicon.png","modified":0,"renderable":0},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.3a9902.eot","path":"fonts/iconfont.3a9902.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.6e162c.woff","path":"fonts/iconfont.6e162c.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.9abe9f.svg","path":"fonts/iconfont.9abe9f.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.d0da7e.ttf","path":"fonts/iconfont.d0da7e.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"source/assets/img/weixin.png","path":"assets/img/weixin.png","modified":0,"renderable":0},{"_id":"source/assets/img/headImg/head_1.JPG","path":"assets/img/headImg/head_1.JPG","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"1847f49ac7753f0ed26868df1c9c1769ec13bd21","modified":1497978601694},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1497978602088},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1497978602090},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1497978602093},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1497978602097},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1497978602100},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1497978602103},{"_id":"themes/yilia/README.md","hash":"8444a63c50d8a7e40bb3f1f10e549a60da94a21f","modified":1497978602106},{"_id":"themes/yilia/_config.yml","hash":"6690113c944f8ed52dc61e8e74735a1e2835f1ff","modified":1497978602109},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1497978602399},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1497978602833},{"_id":"source/_posts/Java8-新特性-Lambda表达式.md","hash":"fb125dc7d30be805e6ea10262cb36e0418eaefd1","modified":1501916140424},{"_id":"source/_posts/hello-world.md","hash":"2df9d3a5fb4876b9610faa9eee5c959d39c8f073","modified":1497978601697},{"_id":"source/_posts/hexo-github-blog.md","hash":"aa26e71861bfeeb3f4df3e2999d8d856f9e9b7b3","modified":1497978601701},{"_id":"source/photo/index.md","hash":"e735805f802fc0ae20b69fdcdd5618cc6531b3ff","modified":1497978601712},{"_id":"source/photo/tool.js","hash":"2bb4ac5d1033c92954fc129bf91d7e3e8c8c6972","modified":1497978601716},{"_id":"source/tags/index.md","hash":"f9c2ab05bd751b77a7d399488c4b11d2b16a8318","modified":1497978601719},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1497978602110},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1497978602113},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1497978602113},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1497978602114},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1497978602114},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1497978602115},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1497978602115},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1497978602366},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1497978602367},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1497978602371},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1497978602389},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1497978602391},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1497978602392},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1497978602393},{"_id":"themes/yilia/source/main.b3331d.css","hash":"84809fd726a1d8384977977eee8a2d31a5edf62f","modified":1497978602723},{"_id":"themes/yilia/source/photo.js","hash":"fc923c4dbb4430a00ad49bb89c7d4eab317168c1","modified":1497978602795},{"_id":"themes/yilia/source/slider.445162.js","hash":"e21c3c2cf663d7a4fb0d77f43ae1a148553a7cca","modified":1497978602826},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1497978602403},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1497978602670},{"_id":"themes/yilia/source/main.b3331d.js","hash":"0e98e3674c7687ae4ff7bdcecb05e15434c46e0d","modified":1497978602752},{"_id":"themes/yilia/source/mobile.8d90af.js","hash":"cf2ab659138db5abc70e3e0d7bc64f50d48e834d","modified":1497978602794},{"_id":"source/assets/img/favicon.png","hash":"16ffd7855611ffd6187dc70426cba8d2c3d0fc38","modified":1497978601702},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"143710485f734c5a997e0b1c26192bbba2982bcc","modified":1497978602122},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1497978602126},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"abeb47caf08625fb5af82ae9b1a60fef55d1fe50","modified":1497978602138},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"adadda8c8cc1cf018c0921c69ce2fa08634fbf8b","modified":1497978602167},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1497978602179},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"f8a42263edeeb3ccf6115cea5f96f551ed1e76e5","modified":1497978602182},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"0397442c60b1c5d21dbee690ce716f866379efa2","modified":1497978602185},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1497978602186},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1497978602200},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1497978602205},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"2387d91cf94b0b36e8a36841992a5fce63ebd069","modified":1497978602212},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1497978602219},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1497978602227},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1497978602362},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1497978602365},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1497978602674},{"_id":"themes/yilia/source/fonts/iconfont.3a9902.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1497978602704},{"_id":"themes/yilia/source/fonts/iconfont.6e162c.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1497978602708},{"_id":"themes/yilia/source/fonts/iconfont.9abe9f.svg","hash":"772383b62548e2a4fa560d589e05929b9f6f7f7b","modified":1497978602712},{"_id":"themes/yilia/source/fonts/iconfont.d0da7e.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1497978602716},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1497978602717},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1497978602718},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1497978602718},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1497978602719},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1497978602408},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1497978602414},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1497978602417},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1497978602420},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1497978602423},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1497978602429},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1497978602426},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"e6e83d4863afcc589d4dd2f327e9f396f7d7b343","modified":1497978602432},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"3f5808a49a7365e3f813f78ba96b692f7ca27886","modified":1497978602465},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1497978602510},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1497978602513},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1497978602516},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1497978602519},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1497978602526},{"_id":"themes/yilia/source-src/css/main.scss","hash":"ac8c3312182519e33d0f729d157deb36e5f42894","modified":1497978602529},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1497978602532},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1497978602538},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"a40400734c6509b9ac6e393a6681ccd8bafed5eb","modified":1497978602535},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1497978602540},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1497978602543},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1497978602548},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1497978602554},{"_id":"themes/yilia/source-src/css/social.scss","hash":"b5324302815491d0a5e63142f1ead2048ad3f72f","modified":1497978602551},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1497978602557},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"17a97f7c38f5dfacc3eadf354b5826d77f1c2bdb","modified":1497978602560},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1497978602563},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1497978602577},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1497978602587},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1497978602592},{"_id":"themes/yilia/source-src/js/fix.js","hash":"9591a0f61236a56b2a15a541f572bcfd93823a0f","modified":1497978602598},{"_id":"themes/yilia/source-src/js/main.js","hash":"fe9a52807a4f2d3e8dbdc71633b7299b8a378c1c","modified":1497978602603},{"_id":"themes/yilia/source-src/js/photo.js","hash":"fc923c4dbb4430a00ad49bb89c7d4eab317168c1","modified":1497978602619},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1497978602611},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1497978602625},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1497978602634},{"_id":"themes/yilia/source-src/js/slider.js","hash":"3bf0d70ae171404a0dc73c33ec48927fc2521a54","modified":1497978602639},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"808a2e1ed407984cfdc929b827d3638f70ec9a2a","modified":1497978602657},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1497978602651},{"_id":"source/assets/img/weixin.png","hash":"122cddc38f0d3d39964eee51eb70f7fdd493686c","modified":1497978601709},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"6160c13783a7f31dab4fdcc6b752b3a368586d67","modified":1497978602346},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"c2dccf1a95ec09ceeee5004293ac7edb7e1c9a66","modified":1497978602234},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"1ba1d4a4663eae37b1a2b75c47dfdff4fb3cbf52","modified":1497978602254},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1497978602257},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1497978602265},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1497978602267},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"341103df70d0b476e3acd0afbc507a4a120d8f5f","modified":1497978602276},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1497978602284},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"7851d961ae172f521ba71e255fdc60f4ca0b45ed","modified":1497978602291},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1497978602284},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1497978602438},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1497978602443},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1497978602450},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1497978602455},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1497978602462},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1497978602495},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"772383b62548e2a4fa560d589e05929b9f6f7f7b","modified":1497978602499},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1497978602503},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1497978602507},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1497978602520},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1497978602520},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1497978602523},{"_id":"source/assets/img/headImg/head_1.JPG","hash":"6c61daabe86cd1d27589f00714c2bf2adc615cc0","modified":1497978601705},{"_id":"public/photo/tool.js","hash":"924451456fc391f01e3a40b08ebfc36d83de670b","modified":1501915827579},{"_id":"public/content.json","hash":"57027187a2681b44a31d63b314e10a62475701da","modified":1501915827768},{"_id":"public/photo/index.html","hash":"ba7944bd2c26716aeddf588553167d10216eb29f","modified":1501915827821},{"_id":"public/tags/index.html","hash":"d588b836ad93de2924dd62e658badd318df7652a","modified":1501915827821},{"_id":"public/2017/08/05/Java8-新特性-Lambda表达式/index.html","hash":"c2d676394b48b71fdb4f051f611245656637ad9c","modified":1501916147103},{"_id":"public/2017/06/21/hexo-github-blog/index.html","hash":"f31996801d436392a3dc00cad0643b8945afbe47","modified":1501915827822},{"_id":"public/2017/06/21/hello-world/index.html","hash":"22fe8c962664673509979ebc003d0bcafea216a2","modified":1501915827822},{"_id":"public/index.html","hash":"b9fa75e0a9cb0586ef926e976ce99f3dd56eebee","modified":1501916147104},{"_id":"public/archives/index.html","hash":"d552a0bb3a5dc6143403d1106a8fd9daccac9e20","modified":1501915827823},{"_id":"public/archives/2017/index.html","hash":"56866c4da07648bbe18c134e5dac69870934467e","modified":1501915827823},{"_id":"public/archives/2017/06/index.html","hash":"e84823a81a3370cd4024af60d03514a78457802f","modified":1501915827823},{"_id":"public/archives/2017/08/index.html","hash":"d1d812e1a2c405bd6c6908e75c8a7118790d81b5","modified":1501915827823},{"_id":"public/tags/Java/index.html","hash":"cc725b633181cc841f8515ff7283ebffaff326f0","modified":1501915827824},{"_id":"public/tags/Java8/index.html","hash":"ed2d70b91e00800621e4fa1bb27afb69ef207ed2","modified":1501915827824},{"_id":"public/tags/Lambda/index.html","hash":"7feaa560c08f1be1192d84fda5c72553c16f71a5","modified":1501915827824},{"_id":"public/tags/Hello/index.html","hash":"7062dfa2f16dc72195e99a4703070e79c5f345e1","modified":1501915827824},{"_id":"public/tags/膜法/index.html","hash":"5a21604299f3d1c36c63eb0dbb60a5e639b34634","modified":1501915827825},{"_id":"public/tags/博客/index.html","hash":"da448211b5d18b4d3e9739861ee64b5e25ff4b1c","modified":1501915827825},{"_id":"public/tags/hexo/index.html","hash":"58d03d8915bf88caef9902f3606bebde45f7ead8","modified":1501915827825},{"_id":"public/tags/github/index.html","hash":"3630ce129d7290a2b53ca281f9c43cf087de3f00","modified":1501915827825},{"_id":"public/CNAME","hash":"1847f49ac7753f0ed26868df1c9c1769ec13bd21","modified":1501915827835},{"_id":"public/assets/img/favicon.png","hash":"16ffd7855611ffd6187dc70426cba8d2c3d0fc38","modified":1501915827835},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1501915827835},{"_id":"public/fonts/iconfont.3a9902.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1501915827835},{"_id":"public/fonts/iconfont.6e162c.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1501915827835},{"_id":"public/fonts/iconfont.9abe9f.svg","hash":"772383b62548e2a4fa560d589e05929b9f6f7f7b","modified":1501915827835},{"_id":"public/fonts/iconfont.d0da7e.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1501915827835},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1501915827835},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1501915827836},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1501915827836},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1501915827836},{"_id":"public/assets/img/weixin.png","hash":"122cddc38f0d3d39964eee51eb70f7fdd493686c","modified":1501915827844},{"_id":"public/photo.js","hash":"fc923c4dbb4430a00ad49bb89c7d4eab317168c1","modified":1501915827859},{"_id":"public/main.b3331d.css","hash":"84809fd726a1d8384977977eee8a2d31a5edf62f","modified":1501915827859},{"_id":"public/main.b3331d.js","hash":"0e98e3674c7687ae4ff7bdcecb05e15434c46e0d","modified":1501915827859},{"_id":"public/slider.445162.js","hash":"e21c3c2cf663d7a4fb0d77f43ae1a148553a7cca","modified":1501915827860},{"_id":"public/mobile.8d90af.js","hash":"cf2ab659138db5abc70e3e0d7bc64f50d48e834d","modified":1501915827860},{"_id":"public/assets/img/headImg/head_1.JPG","hash":"6c61daabe86cd1d27589f00714c2bf2adc615cc0","modified":1501915827860}],"Category":[],"Data":[],"Page":[{"title":"相册","noDate":"true","_content":"<link type=\"text/css\" href=\"\" rel=\"stylesheet\">\n    <div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div>","source":"photo/index.md","raw":"\n title: 相册\n noDate: 'true'\n---\n<link type=\"text/css\" href=\"\" rel=\"stylesheet\">\n    <div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div>","date":"2017-06-20T17:10:01.712Z","updated":"2017-06-20T17:10:01.712Z","path":"photo/index.html","comments":1,"layout":"page","_id":"cj5yxwkx2000114iu5hzyi5g8","content":"<p><link type=\"text/css\" href=\"\" rel=\"stylesheet\"><br>    <div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div></p>\n","site":{"data":{}},"excerpt":"","more":"<p><link type=\"text/css\" href=\"\" rel=\"stylesheet\"><br>    <div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div></p>\n"},{"_content":"\"use strict\";\nconst fs = require(\"fs\");\nconst path = \"../../photos\";\n\nfs.readdir(path, function (err, files) {\n    if (err) {\n        return;\n    }\n    let arr = [];\n    (function iterator(index) {\n        if (index == files.length) {\n            fs.writeFile(\"output.json\", JSON.stringify(arr, null, \"\\t\"));\n            return;\n        }\n\n        fs.stat(path + \"/\" + files[index], function (err, stats) {\n            if (err) {\n                return;\n            }\n            if (stats.isFile()) {\n                arr.push(files[index]);\n            }\n            iterator(index + 1);\n        })\n    }(0));\n});","source":"photo/tool.js","raw":"\"use strict\";\nconst fs = require(\"fs\");\nconst path = \"../../photos\";\n\nfs.readdir(path, function (err, files) {\n    if (err) {\n        return;\n    }\n    let arr = [];\n    (function iterator(index) {\n        if (index == files.length) {\n            fs.writeFile(\"output.json\", JSON.stringify(arr, null, \"\\t\"));\n            return;\n        }\n\n        fs.stat(path + \"/\" + files[index], function (err, stats) {\n            if (err) {\n                return;\n            }\n            if (stats.isFile()) {\n                arr.push(files[index]);\n            }\n            iterator(index + 1);\n        })\n    }(0));\n});","date":"2017-06-20T17:10:01.716Z","updated":"2017-06-20T17:10:01.716Z","path":"photo/tool.js","layout":"false","title":"","comments":1,"_id":"cj5yxwkxa000314iul2v3wrvk","content":"\"use strict\";\nconst fs = require(\"fs\");\nconst path = \"../../photos\";\n\nfs.readdir(path, function (err, files) {\n    if (err) {\n        return;\n    }\n    let arr = [];\n    (function iterator(index) {\n        if (index == files.length) {\n            fs.writeFile(\"output.json\", JSON.stringify(arr, null, \"\\t\"));\n            return;\n        }\n\n        fs.stat(path + \"/\" + files[index], function (err, stats) {\n            if (err) {\n                return;\n            }\n            if (stats.isFile()) {\n                arr.push(files[index]);\n            }\n            iterator(index + 1);\n        })\n    }(0));\n});","site":{"data":{}},"excerpt":"","more":"\"use strict\";\nconst fs = require(\"fs\");\nconst path = \"../../photos\";\n\nfs.readdir(path, function (err, files) {\n    if (err) {\n        return;\n    }\n    let arr = [];\n    (function iterator(index) {\n        if (index == files.length) {\n            fs.writeFile(\"output.json\", JSON.stringify(arr, null, \"\\t\"));\n            return;\n        }\n\n        fs.stat(path + \"/\" + files[index], function (err, stats) {\n            if (err) {\n                return;\n            }\n            if (stats.isFile()) {\n                arr.push(files[index]);\n            }\n            iterator(index + 1);\n        })\n    }(0));\n});"},{"title":"tags","date":"2017-05-26T15:22:37.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-05-26 23:22:37\ntype: \"tags\"\n---\n","updated":"2017-06-20T17:10:01.719Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj5yxwkxm000614iugk0anc11","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Java8 新特性 Lambda表达式","date":"2017-08-05T05:18:27.000Z","toc":true,"reward":false,"_content":"\n### 什么是Lambda表达式 \n\n  **Lambda**可以理解为是一个**匿名函数**，Lambda表达式可以说是一段可以传递的代码。可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升。\n\n  在java8以前，我们是通过接口来传递代码的(面向接口的编程)。\n\n  比如：\n\n```java\n Runnable runnable = new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(\"run----\");\n            }\n        };\n\n Thread th = new Thread(runnable);\n```\n\n这里Thread类需要的其实并不是Runnable对象，而是它的方法\n\n```java\npublic abstract void run();\n```\n\n但是没有办法直接传递方法，只能通过接口来传递。\n\n**Java8**提供了一种新的紧凑的传递代码的语法--就是**Lambda**表达式。比如刚才的Thread可以用lambda表达式修改为：\n\n```java\nRunnable runnable = (() -> System.out.println(\"run----\"));\nThread th = new Thread(runnable);\n//还可以继续简化\nThread t = new Thread(() -> System.out.println(\"run----\"));\n```\n\n是不是简洁多了？。\n\n#### 1.Lambda表达式语法\n\nLambda 表达式在Java 语言中引入了一个新的语法元素和操作符。这个操作符为 `->` ， 该操作符被称为 Lambda 操作符或剪头操作符。它将 Lambda 分为两个部分：\n\n**左侧:** 指定了 Lambda 表达式所需要的所有参数\n\n**右侧:**指定了 Lambda 体，即 Lambda 表达式要执行的功能即需传递的方法的实现。\n\n**语法格式:**\n\n**无参,无返回值,Lambda体只需一条语句**\n\n````java\nRunnable runnable = (() -> System.out.println(\"run----\"));\n````\n**Lambda需要一个参数**\n\n````java\nConsumer<String> consumer = ((str) -> System.out.println(str));\n//只有一个参数时，参数小括号可以省略，如下\nConsumer<String> consumer = (str -> System.out.println(str));\n````\n**Lambda  需要两个参数，并且有返回值**\n\n````java\nComparator<Integer> comparator = ((num1, num2) -> {\n   return num1 - num2;\n});\n//当表达式内只有一条语句时，return和大括号可以省略，如下\nComparator<Integer> comparator = ((num1, num2) -> num1 - num2);\n````\n**数据类型可以省略，因为可由编译器推断得出，称为“类型推断”**\n\n````java\nBinaryOperator<Long> binaryOperator = ((Long num1, Long num2) -> num1 + num2);\n//(Long l1, Long l2) 中参数类型可以省略，编译器可以自动推断，如下↓\nBinaryOperator<Long> binaryOperator = ((num1, num2) -> num1 + num2);\n````\n\n**可以看出，相比匿名内部类，传递代码变得更为直观，不再有实现接口的模板代码，不再声明方法，也名字也没有，而是直接给出了方法的实现代码**\n\n#### **2.变量引用**\n\n​\t与匿名内部类类似，Lambda表达式也可以访问定义在主体代码外部的变量，但对于局部变量，它也只能访问final类型的变量，与匿名内部类的区别是，它不要求变量声明为final，但变量事实上不能被重新赋值。比如：\n\n````java\nExecutorService executor = Executors.newFixedThreadPool(10);\nString msg = \"hello world\";\nexecutor.submit(() -> System.out.println(msg));\n````\n\n可以访问局部变量msg，但msg不能被重新赋值，如果这样写：\n\n````java\nExecutorService executor = Executors.newFixedThreadPool(10);\nString msg = \"hello world\";\nmsg = \"good morning\";\nexecutor.submit(() -> System.out.println(msg));\n//编译器报错 \n//Variable used in lambda expression should be final or effectively final\n````\n\n### 与匿名内部内比较\n\n从以上内容可以看出，Lambda表达式与匿名内部类很像，主要就是简化了语法，使得编写更加简单，但Lambda与匿名内部类不同的是，java会为每个匿名内部类生成一个一个类，而Lambda表达式不会。\n\nLambda表达式不是匿名内部类，那它的类型到底是什么呢？是**函数式接口**。\n\n下篇将讲解Java新特性，**函数式接口**\n\n​\t\n\n\n\n","source":"_posts/Java8-新特性-Lambda表达式.md","raw":"---\ntitle: Java8 新特性 Lambda表达式\ndate: 2017-08-05 13:18:27\ntags: [Java,Java8,Lambda]\ntoc: true\nreward: false\n---\n\n### 什么是Lambda表达式 \n\n  **Lambda**可以理解为是一个**匿名函数**，Lambda表达式可以说是一段可以传递的代码。可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升。\n\n  在java8以前，我们是通过接口来传递代码的(面向接口的编程)。\n\n  比如：\n\n```java\n Runnable runnable = new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(\"run----\");\n            }\n        };\n\n Thread th = new Thread(runnable);\n```\n\n这里Thread类需要的其实并不是Runnable对象，而是它的方法\n\n```java\npublic abstract void run();\n```\n\n但是没有办法直接传递方法，只能通过接口来传递。\n\n**Java8**提供了一种新的紧凑的传递代码的语法--就是**Lambda**表达式。比如刚才的Thread可以用lambda表达式修改为：\n\n```java\nRunnable runnable = (() -> System.out.println(\"run----\"));\nThread th = new Thread(runnable);\n//还可以继续简化\nThread t = new Thread(() -> System.out.println(\"run----\"));\n```\n\n是不是简洁多了？。\n\n#### 1.Lambda表达式语法\n\nLambda 表达式在Java 语言中引入了一个新的语法元素和操作符。这个操作符为 `->` ， 该操作符被称为 Lambda 操作符或剪头操作符。它将 Lambda 分为两个部分：\n\n**左侧:** 指定了 Lambda 表达式所需要的所有参数\n\n**右侧:**指定了 Lambda 体，即 Lambda 表达式要执行的功能即需传递的方法的实现。\n\n**语法格式:**\n\n**无参,无返回值,Lambda体只需一条语句**\n\n````java\nRunnable runnable = (() -> System.out.println(\"run----\"));\n````\n**Lambda需要一个参数**\n\n````java\nConsumer<String> consumer = ((str) -> System.out.println(str));\n//只有一个参数时，参数小括号可以省略，如下\nConsumer<String> consumer = (str -> System.out.println(str));\n````\n**Lambda  需要两个参数，并且有返回值**\n\n````java\nComparator<Integer> comparator = ((num1, num2) -> {\n   return num1 - num2;\n});\n//当表达式内只有一条语句时，return和大括号可以省略，如下\nComparator<Integer> comparator = ((num1, num2) -> num1 - num2);\n````\n**数据类型可以省略，因为可由编译器推断得出，称为“类型推断”**\n\n````java\nBinaryOperator<Long> binaryOperator = ((Long num1, Long num2) -> num1 + num2);\n//(Long l1, Long l2) 中参数类型可以省略，编译器可以自动推断，如下↓\nBinaryOperator<Long> binaryOperator = ((num1, num2) -> num1 + num2);\n````\n\n**可以看出，相比匿名内部类，传递代码变得更为直观，不再有实现接口的模板代码，不再声明方法，也名字也没有，而是直接给出了方法的实现代码**\n\n#### **2.变量引用**\n\n​\t与匿名内部类类似，Lambda表达式也可以访问定义在主体代码外部的变量，但对于局部变量，它也只能访问final类型的变量，与匿名内部类的区别是，它不要求变量声明为final，但变量事实上不能被重新赋值。比如：\n\n````java\nExecutorService executor = Executors.newFixedThreadPool(10);\nString msg = \"hello world\";\nexecutor.submit(() -> System.out.println(msg));\n````\n\n可以访问局部变量msg，但msg不能被重新赋值，如果这样写：\n\n````java\nExecutorService executor = Executors.newFixedThreadPool(10);\nString msg = \"hello world\";\nmsg = \"good morning\";\nexecutor.submit(() -> System.out.println(msg));\n//编译器报错 \n//Variable used in lambda expression should be final or effectively final\n````\n\n### 与匿名内部内比较\n\n从以上内容可以看出，Lambda表达式与匿名内部类很像，主要就是简化了语法，使得编写更加简单，但Lambda与匿名内部类不同的是，java会为每个匿名内部类生成一个一个类，而Lambda表达式不会。\n\nLambda表达式不是匿名内部类，那它的类型到底是什么呢？是**函数式接口**。\n\n下篇将讲解Java新特性，**函数式接口**\n\n​\t\n\n\n\n","slug":"Java8-新特性-Lambda表达式","published":1,"updated":"2017-08-05T06:55:40.424Z","_id":"cj5yxwkwu000014iuv7o8wol3","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"什么是Lambda表达式\"><a href=\"#什么是Lambda表达式\" class=\"headerlink\" title=\"什么是Lambda表达式\"></a>什么是Lambda表达式</h3><p>  <strong>Lambda</strong>可以理解为是一个<strong>匿名函数</strong>，Lambda表达式可以说是一段可以传递的代码。可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升。</p>\n<p>  在java8以前，我们是通过接口来传递代码的(面向接口的编程)。</p>\n<p>  比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Runnable runnable = <span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">               System.out.println(<span class=\"string\">\"run----\"</span>);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;;</div><div class=\"line\"></div><div class=\"line\">Thread th = <span class=\"keyword\">new</span> Thread(runnable);</div></pre></td></tr></table></figure>\n<p>这里Thread类需要的其实并不是Runnable对象，而是它的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</div></pre></td></tr></table></figure>\n<p>但是没有办法直接传递方法，只能通过接口来传递。</p>\n<p><strong>Java8</strong>提供了一种新的紧凑的传递代码的语法–就是<strong>Lambda</strong>表达式。比如刚才的Thread可以用lambda表达式修改为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Runnable runnable = (() -&gt; System.out.println(<span class=\"string\">\"run----\"</span>));</div><div class=\"line\">Thread th = <span class=\"keyword\">new</span> Thread(runnable);</div><div class=\"line\"><span class=\"comment\">//还可以继续简化</span></div><div class=\"line\">Thread t = <span class=\"keyword\">new</span> Thread(() -&gt; System.out.println(<span class=\"string\">\"run----\"</span>));</div></pre></td></tr></table></figure>\n<p>是不是简洁多了？。</p>\n<h4 id=\"1-Lambda表达式语法\"><a href=\"#1-Lambda表达式语法\" class=\"headerlink\" title=\"1.Lambda表达式语法\"></a>1.Lambda表达式语法</h4><p>Lambda 表达式在Java 语言中引入了一个新的语法元素和操作符。这个操作符为 <code>-&gt;</code> ， 该操作符被称为 Lambda 操作符或剪头操作符。它将 Lambda 分为两个部分：</p>\n<p><strong>左侧:</strong> 指定了 Lambda 表达式所需要的所有参数</p>\n<p><strong>右侧:</strong>指定了 Lambda 体，即 Lambda 表达式要执行的功能即需传递的方法的实现。</p>\n<p><strong>语法格式:</strong></p>\n<p><strong>无参,无返回值,Lambda体只需一条语句</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Runnable runnable = (() -&gt; System.out.println(<span class=\"string\">\"run----\"</span>));</div></pre></td></tr></table></figure>\n<p><strong>Lambda需要一个参数</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Consumer&lt;String&gt; consumer = ((str) -&gt; System.out.println(str));</div><div class=\"line\"><span class=\"comment\">//只有一个参数时，参数小括号可以省略，如下</span></div><div class=\"line\">Consumer&lt;String&gt; consumer = (str -&gt; System.out.println(str));</div></pre></td></tr></table></figure>\n<p><strong>Lambda  需要两个参数，并且有返回值</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Comparator&lt;Integer&gt; comparator = ((num1, num2) -&gt; &#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> num1 - num2;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//当表达式内只有一条语句时，return和大括号可以省略，如下</span></div><div class=\"line\">Comparator&lt;Integer&gt; comparator = ((num1, num2) -&gt; num1 - num2);</div></pre></td></tr></table></figure>\n<p><strong>数据类型可以省略，因为可由编译器推断得出，称为“类型推断”</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">BinaryOperator&lt;Long&gt; binaryOperator = ((Long num1, Long num2) -&gt; num1 + num2);</div><div class=\"line\"><span class=\"comment\">//(Long l1, Long l2) 中参数类型可以省略，编译器可以自动推断，如下↓</span></div><div class=\"line\">BinaryOperator&lt;Long&gt; binaryOperator = ((num1, num2) -&gt; num1 + num2);</div></pre></td></tr></table></figure>\n<p><strong>可以看出，相比匿名内部类，传递代码变得更为直观，不再有实现接口的模板代码，不再声明方法，也名字也没有，而是直接给出了方法的实现代码</strong></p>\n<h4 id=\"2-变量引用\"><a href=\"#2-变量引用\" class=\"headerlink\" title=\"2.变量引用\"></a><strong>2.变量引用</strong></h4><p>​    与匿名内部类类似，Lambda表达式也可以访问定义在主体代码外部的变量，但对于局部变量，它也只能访问final类型的变量，与匿名内部类的区别是，它不要求变量声明为final，但变量事实上不能被重新赋值。比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ExecutorService executor = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</div><div class=\"line\">String msg = <span class=\"string\">\"hello world\"</span>;</div><div class=\"line\">executor.submit(() -&gt; System.out.println(msg));</div></pre></td></tr></table></figure>\n<p>可以访问局部变量msg，但msg不能被重新赋值，如果这样写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">ExecutorService executor = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</div><div class=\"line\">String msg = <span class=\"string\">\"hello world\"</span>;</div><div class=\"line\">msg = <span class=\"string\">\"good morning\"</span>;</div><div class=\"line\">executor.submit(() -&gt; System.out.println(msg));</div><div class=\"line\"><span class=\"comment\">//编译器报错 </span></div><div class=\"line\"><span class=\"comment\">//Variable used in lambda expression should be final or effectively final</span></div></pre></td></tr></table></figure>\n<h3 id=\"与匿名内部内比较\"><a href=\"#与匿名内部内比较\" class=\"headerlink\" title=\"与匿名内部内比较\"></a>与匿名内部内比较</h3><p>从以上内容可以看出，Lambda表达式与匿名内部类很像，主要就是简化了语法，使得编写更加简单，但Lambda与匿名内部类不同的是，java会为每个匿名内部类生成一个一个类，而Lambda表达式不会。</p>\n<p>Lambda表达式不是匿名内部类，那它的类型到底是什么呢？是<strong>函数式接口</strong>。</p>\n<p>下篇将讲解Java新特性，<strong>函数式接口</strong></p>\n<p>​    </p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是Lambda表达式\"><a href=\"#什么是Lambda表达式\" class=\"headerlink\" title=\"什么是Lambda表达式\"></a>什么是Lambda表达式</h3><p>  <strong>Lambda</strong>可以理解为是一个<strong>匿名函数</strong>，Lambda表达式可以说是一段可以传递的代码。可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升。</p>\n<p>  在java8以前，我们是通过接口来传递代码的(面向接口的编程)。</p>\n<p>  比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Runnable runnable = <span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">               System.out.println(<span class=\"string\">\"run----\"</span>);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;;</div><div class=\"line\"></div><div class=\"line\">Thread th = <span class=\"keyword\">new</span> Thread(runnable);</div></pre></td></tr></table></figure>\n<p>这里Thread类需要的其实并不是Runnable对象，而是它的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</div></pre></td></tr></table></figure>\n<p>但是没有办法直接传递方法，只能通过接口来传递。</p>\n<p><strong>Java8</strong>提供了一种新的紧凑的传递代码的语法–就是<strong>Lambda</strong>表达式。比如刚才的Thread可以用lambda表达式修改为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Runnable runnable = (() -&gt; System.out.println(<span class=\"string\">\"run----\"</span>));</div><div class=\"line\">Thread th = <span class=\"keyword\">new</span> Thread(runnable);</div><div class=\"line\"><span class=\"comment\">//还可以继续简化</span></div><div class=\"line\">Thread t = <span class=\"keyword\">new</span> Thread(() -&gt; System.out.println(<span class=\"string\">\"run----\"</span>));</div></pre></td></tr></table></figure>\n<p>是不是简洁多了？。</p>\n<h4 id=\"1-Lambda表达式语法\"><a href=\"#1-Lambda表达式语法\" class=\"headerlink\" title=\"1.Lambda表达式语法\"></a>1.Lambda表达式语法</h4><p>Lambda 表达式在Java 语言中引入了一个新的语法元素和操作符。这个操作符为 <code>-&gt;</code> ， 该操作符被称为 Lambda 操作符或剪头操作符。它将 Lambda 分为两个部分：</p>\n<p><strong>左侧:</strong> 指定了 Lambda 表达式所需要的所有参数</p>\n<p><strong>右侧:</strong>指定了 Lambda 体，即 Lambda 表达式要执行的功能即需传递的方法的实现。</p>\n<p><strong>语法格式:</strong></p>\n<p><strong>无参,无返回值,Lambda体只需一条语句</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Runnable runnable = (() -&gt; System.out.println(<span class=\"string\">\"run----\"</span>));</div></pre></td></tr></table></figure>\n<p><strong>Lambda需要一个参数</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Consumer&lt;String&gt; consumer = ((str) -&gt; System.out.println(str));</div><div class=\"line\"><span class=\"comment\">//只有一个参数时，参数小括号可以省略，如下</span></div><div class=\"line\">Consumer&lt;String&gt; consumer = (str -&gt; System.out.println(str));</div></pre></td></tr></table></figure>\n<p><strong>Lambda  需要两个参数，并且有返回值</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Comparator&lt;Integer&gt; comparator = ((num1, num2) -&gt; &#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> num1 - num2;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//当表达式内只有一条语句时，return和大括号可以省略，如下</span></div><div class=\"line\">Comparator&lt;Integer&gt; comparator = ((num1, num2) -&gt; num1 - num2);</div></pre></td></tr></table></figure>\n<p><strong>数据类型可以省略，因为可由编译器推断得出，称为“类型推断”</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">BinaryOperator&lt;Long&gt; binaryOperator = ((Long num1, Long num2) -&gt; num1 + num2);</div><div class=\"line\"><span class=\"comment\">//(Long l1, Long l2) 中参数类型可以省略，编译器可以自动推断，如下↓</span></div><div class=\"line\">BinaryOperator&lt;Long&gt; binaryOperator = ((num1, num2) -&gt; num1 + num2);</div></pre></td></tr></table></figure>\n<p><strong>可以看出，相比匿名内部类，传递代码变得更为直观，不再有实现接口的模板代码，不再声明方法，也名字也没有，而是直接给出了方法的实现代码</strong></p>\n<h4 id=\"2-变量引用\"><a href=\"#2-变量引用\" class=\"headerlink\" title=\"2.变量引用\"></a><strong>2.变量引用</strong></h4><p>​    与匿名内部类类似，Lambda表达式也可以访问定义在主体代码外部的变量，但对于局部变量，它也只能访问final类型的变量，与匿名内部类的区别是，它不要求变量声明为final，但变量事实上不能被重新赋值。比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ExecutorService executor = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</div><div class=\"line\">String msg = <span class=\"string\">\"hello world\"</span>;</div><div class=\"line\">executor.submit(() -&gt; System.out.println(msg));</div></pre></td></tr></table></figure>\n<p>可以访问局部变量msg，但msg不能被重新赋值，如果这样写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">ExecutorService executor = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</div><div class=\"line\">String msg = <span class=\"string\">\"hello world\"</span>;</div><div class=\"line\">msg = <span class=\"string\">\"good morning\"</span>;</div><div class=\"line\">executor.submit(() -&gt; System.out.println(msg));</div><div class=\"line\"><span class=\"comment\">//编译器报错 </span></div><div class=\"line\"><span class=\"comment\">//Variable used in lambda expression should be final or effectively final</span></div></pre></td></tr></table></figure>\n<h3 id=\"与匿名内部内比较\"><a href=\"#与匿名内部内比较\" class=\"headerlink\" title=\"与匿名内部内比较\"></a>与匿名内部内比较</h3><p>从以上内容可以看出，Lambda表达式与匿名内部类很像，主要就是简化了语法，使得编写更加简单，但Lambda与匿名内部类不同的是，java会为每个匿名内部类生成一个一个类，而Lambda表达式不会。</p>\n<p>Lambda表达式不是匿名内部类，那它的类型到底是什么呢？是<strong>函数式接口</strong>。</p>\n<p>下篇将讲解Java新特性，<strong>函数式接口</strong></p>\n<p>​    </p>\n"},{"title":"Hello World","toc":true,"reward":true,"_content":"### 进来你就是我的人了\n\n <b>一颗赛艇</b>\n 苟利国家生死以\n 岂因福祸趋避之\n\n### 我跟你讲不要搞大新闻\n\n``` java\n    while(alive){\n        your.minit = 59s;\n    }\n```\n<!-- more -->\n你觉得你跑得快是不是\n\n### 别往下看，没了\n\n``` code\n    /(o_ _)ﾉ\n```\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntags: [Hello,膜法]\ntoc: true\nreward: true\n---\n### 进来你就是我的人了\n\n <b>一颗赛艇</b>\n 苟利国家生死以\n 岂因福祸趋避之\n\n### 我跟你讲不要搞大新闻\n\n``` java\n    while(alive){\n        your.minit = 59s;\n    }\n```\n<!-- more -->\n你觉得你跑得快是不是\n\n### 别往下看，没了\n\n``` code\n    /(o_ _)ﾉ\n```\n","slug":"hello-world","published":1,"date":"2017-06-20T17:10:01.695Z","updated":"2017-06-20T17:10:01.697Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5yxwkx5000214iu1xcpnypk","content":"<h3 id=\"进来你就是我的人了\"><a href=\"#进来你就是我的人了\" class=\"headerlink\" title=\"进来你就是我的人了\"></a>进来你就是我的人了</h3><p> <b>一颗赛艇</b><br> 苟利国家生死以<br> 岂因福祸趋避之</p>\n<h3 id=\"我跟你讲不要搞大新闻\"><a href=\"#我跟你讲不要搞大新闻\" class=\"headerlink\" title=\"我跟你讲不要搞大新闻\"></a>我跟你讲不要搞大新闻</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">while</span>(alive)&#123;</div><div class=\"line\">    your.minit = <span class=\"number\">59</span>s;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>你觉得你跑得快是不是</p>\n<h3 id=\"别往下看，没了\"><a href=\"#别往下看，没了\" class=\"headerlink\" title=\"别往下看，没了\"></a>别往下看，没了</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/(o_ _)ﾉ</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"进来你就是我的人了\"><a href=\"#进来你就是我的人了\" class=\"headerlink\" title=\"进来你就是我的人了\"></a>进来你就是我的人了</h3><p> <b>一颗赛艇</b><br> 苟利国家生死以<br> 岂因福祸趋避之</p>\n<h3 id=\"我跟你讲不要搞大新闻\"><a href=\"#我跟你讲不要搞大新闻\" class=\"headerlink\" title=\"我跟你讲不要搞大新闻\"></a>我跟你讲不要搞大新闻</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">while</span>(alive)&#123;</div><div class=\"line\">    your.minit = <span class=\"number\">59</span>s;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<p>你觉得你跑得快是不是</p>\n<h3 id=\"别往下看，没了\"><a href=\"#别往下看，没了\" class=\"headerlink\" title=\"别往下看，没了\"></a>别往下看，没了</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/(o_ _)ﾉ</div></pre></td></tr></table></figure>"},{"title":"Hexo+github一步一步搭建个人博客","toc":true,"reward":true,"_content":"\n<p>最近用使用Hexo和github搭建了一个个人博客，现在记录下来;\nHexo是一个强大的博客框架,这里是[中文文档](https://hexo.io/zh-cn/docs/index.html)</p>\n\n### **一、基础博客搭建流程**\n#### 安装Node和Git\n  - windows：\n    下载Node.js客户端安装即可。\n    在命令行输入node -v出现如下图所示就安装成功了\n    ![Alt   text](http://oqnan33k8.bkt.clouddn.com/myblog_img/hexo_github_blog/node.png)\n\n  - 下载git(国内直接从官网下载比较困难，需要翻墙。这里提供一个国内的下载站)[download](https://github.com/waylau/git-for-win)\n  安装正确后 在桌面或文件夹空白处鼠标右键菜单会新增“Git GUI Here”和“Git Bash Here”两个选项。\n\n  <!-- more -->\n\n#### 使用hexo搭建博客\n - **安装全局hexo**\n   右键运行Git Bash 执行`npm install -g hexo`;安装后输入`hexo -v`,出现版本信息表示安装成功。\n - **在项目中安装hexo**\n    新建文件夹为你的博客项目名，进入项目打开Git Bash\n    `npm install hexo --save`在项目中安装hexo;\n    `hexo init`初始化hexo\n    `npm install`安装hexo所需依赖包\n - **安装hexo插件**\n    `npm install hexo-server --save` 本地服务所需插件\n    `npm install hexo-deployer-git --save`使用git进行部署所需插件\n\n#### 在本地生成博客静态页面并预览\n在项目路径下打开Git Bash\n - **在本地生成静态页面**\n  `hexo generate`,生成一个存放静态文件的文件夹public;该命令可以简写为:`hexo g`\n\n- **启动本地服务器**\n  `hexo server`,启动服务;简写为`hexo s`;\n  默认网址为：`http://localhost:4000/`\n  默认端口为4000，如果端口被占用,执行`hexo s -p 5000`表示指定服务端口为5000。\n\n如果以上步骤都不出意外的话，你就会看到一个Hexo博客初始化的页面。\n\n### **二、GitHub+hexo配置个人博客**\n **上面介绍了如何在本地搭建博客，接下来开始配置GitHub并关联Hexo**\n - **GitHub pages**\n1. 首先注册一个GigHub帐号，注册比较简单就不再赘\n2. 帐号创建号后，需要创建一个仓库(Respository);**注意:**</b>仓库名字要与GitHub用户名一致,比如我的用户名是FireYao,创建的respository名就是FireYao.github.io\n3. 创建好respository后，进入到该respository界面,点击settings拉到最下方找到GitHub Pages,点击 **Launch automatic page generator**,让GitHub生成GitHubPager\n\n- **配置SSH Keys**\n  1. 本地生成ssh密钥。\n  git bash下输入`ssh-keygen -t rsa -C ‘你的邮箱地址’`\n  2. 上传本地的公钥串，使当前电脑与GitHub账户建立联系。\n  3. 在你的电脑C：\\ Users\\你的计算机用户名.ssh目录下打开刚刚生成的id_rsa.pub，复制里面的内容。然后点击你GitHub账户右上角的头像，选择settings，找到SSH and GPG keys，点击进入之后再点击New SSH key，title随便写，把公钥串粘贴到文本框，保存即可\n- **在Hexo配置文件中关联GitHub账号**\n  1. 在之前搭建好的本地博客项目中编辑` _config.yml`文件,把其中的deploy参数（没有的话就按如下格式新建，注意冒号后面一定要有一个空格），修改为：\n  ```code\n  deploy:\n  \ttype: git\n  \trepo: https://github.com/FireYao/FireYao.github.io.git\n  \tbranch: master\n  ```\n  将其中的FireYao改为你自己的github用户名\n  2. 重新部署项目\n    在博客根目录打开Git Bash依次执行\n    ```code\n    hexo clean    #会清除缓存文件db.json及之前生成的静态文件夹public；\n    hexo g     #会重新生成静态文件夹public；\n    hexo deploy    #把本地生成的静态文件部署到FireYao.github.io这个仓库中的master分支上；简写形式为hexo d\n    ```\n    `hexo g 和 hexo d可以合并在一起写：hexo g -d`\n  3. 在浏览器中访问博客\n     在浏览器中输入`FireYao.github.io`,没毛病的话，你应该就能看到之前在本地搭建的那个博客页面了。\n\n### 小结    \n<p>\n  到这里已经通过Hexo创建了一个最原始的博客，并将博客的静态文件存放到github仓库中，通过外网以github的默认域名访问这个博客。\n</p>\n**未完待续**\n","source":"_posts/hexo-github-blog.md","raw":"---\ntitle: Hexo+github一步一步搭建个人博客\ntags: [博客,hexo,github]\ntoc: true\nreward: true\n---\n\n<p>最近用使用Hexo和github搭建了一个个人博客，现在记录下来;\nHexo是一个强大的博客框架,这里是[中文文档](https://hexo.io/zh-cn/docs/index.html)</p>\n\n### **一、基础博客搭建流程**\n#### 安装Node和Git\n  - windows：\n    下载Node.js客户端安装即可。\n    在命令行输入node -v出现如下图所示就安装成功了\n    ![Alt   text](http://oqnan33k8.bkt.clouddn.com/myblog_img/hexo_github_blog/node.png)\n\n  - 下载git(国内直接从官网下载比较困难，需要翻墙。这里提供一个国内的下载站)[download](https://github.com/waylau/git-for-win)\n  安装正确后 在桌面或文件夹空白处鼠标右键菜单会新增“Git GUI Here”和“Git Bash Here”两个选项。\n\n  <!-- more -->\n\n#### 使用hexo搭建博客\n - **安装全局hexo**\n   右键运行Git Bash 执行`npm install -g hexo`;安装后输入`hexo -v`,出现版本信息表示安装成功。\n - **在项目中安装hexo**\n    新建文件夹为你的博客项目名，进入项目打开Git Bash\n    `npm install hexo --save`在项目中安装hexo;\n    `hexo init`初始化hexo\n    `npm install`安装hexo所需依赖包\n - **安装hexo插件**\n    `npm install hexo-server --save` 本地服务所需插件\n    `npm install hexo-deployer-git --save`使用git进行部署所需插件\n\n#### 在本地生成博客静态页面并预览\n在项目路径下打开Git Bash\n - **在本地生成静态页面**\n  `hexo generate`,生成一个存放静态文件的文件夹public;该命令可以简写为:`hexo g`\n\n- **启动本地服务器**\n  `hexo server`,启动服务;简写为`hexo s`;\n  默认网址为：`http://localhost:4000/`\n  默认端口为4000，如果端口被占用,执行`hexo s -p 5000`表示指定服务端口为5000。\n\n如果以上步骤都不出意外的话，你就会看到一个Hexo博客初始化的页面。\n\n### **二、GitHub+hexo配置个人博客**\n **上面介绍了如何在本地搭建博客，接下来开始配置GitHub并关联Hexo**\n - **GitHub pages**\n1. 首先注册一个GigHub帐号，注册比较简单就不再赘\n2. 帐号创建号后，需要创建一个仓库(Respository);**注意:**</b>仓库名字要与GitHub用户名一致,比如我的用户名是FireYao,创建的respository名就是FireYao.github.io\n3. 创建好respository后，进入到该respository界面,点击settings拉到最下方找到GitHub Pages,点击 **Launch automatic page generator**,让GitHub生成GitHubPager\n\n- **配置SSH Keys**\n  1. 本地生成ssh密钥。\n  git bash下输入`ssh-keygen -t rsa -C ‘你的邮箱地址’`\n  2. 上传本地的公钥串，使当前电脑与GitHub账户建立联系。\n  3. 在你的电脑C：\\ Users\\你的计算机用户名.ssh目录下打开刚刚生成的id_rsa.pub，复制里面的内容。然后点击你GitHub账户右上角的头像，选择settings，找到SSH and GPG keys，点击进入之后再点击New SSH key，title随便写，把公钥串粘贴到文本框，保存即可\n- **在Hexo配置文件中关联GitHub账号**\n  1. 在之前搭建好的本地博客项目中编辑` _config.yml`文件,把其中的deploy参数（没有的话就按如下格式新建，注意冒号后面一定要有一个空格），修改为：\n  ```code\n  deploy:\n  \ttype: git\n  \trepo: https://github.com/FireYao/FireYao.github.io.git\n  \tbranch: master\n  ```\n  将其中的FireYao改为你自己的github用户名\n  2. 重新部署项目\n    在博客根目录打开Git Bash依次执行\n    ```code\n    hexo clean    #会清除缓存文件db.json及之前生成的静态文件夹public；\n    hexo g     #会重新生成静态文件夹public；\n    hexo deploy    #把本地生成的静态文件部署到FireYao.github.io这个仓库中的master分支上；简写形式为hexo d\n    ```\n    `hexo g 和 hexo d可以合并在一起写：hexo g -d`\n  3. 在浏览器中访问博客\n     在浏览器中输入`FireYao.github.io`,没毛病的话，你应该就能看到之前在本地搭建的那个博客页面了。\n\n### 小结    \n<p>\n  到这里已经通过Hexo创建了一个最原始的博客，并将博客的静态文件存放到github仓库中，通过外网以github的默认域名访问这个博客。\n</p>\n**未完待续**\n","slug":"hexo-github-blog","published":1,"date":"2017-06-20T17:10:01.697Z","updated":"2017-06-20T17:10:01.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5yxwkxj000514iu30dntihm","content":"<p>最近用使用Hexo和github搭建了一个个人博客，现在记录下来;<br>Hexo是一个强大的博客框架,这里是<a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"external\">中文文档</a></p>\n\n<h3 id=\"一、基础博客搭建流程\"><a href=\"#一、基础博客搭建流程\" class=\"headerlink\" title=\"一、基础博客搭建流程\"></a><strong>一、基础博客搭建流程</strong></h3><h4 id=\"安装Node和Git\"><a href=\"#安装Node和Git\" class=\"headerlink\" title=\"安装Node和Git\"></a>安装Node和Git</h4><ul>\n<li><p>windows：<br>下载Node.js客户端安装即可。<br>在命令行输入node -v出现如下图所示就安装成功了<br><img src=\"http://oqnan33k8.bkt.clouddn.com/myblog_img/hexo_github_blog/node.png\" alt=\"Alt   text\"></p>\n</li>\n<li><p>下载git(国内直接从官网下载比较困难，需要翻墙。这里提供一个国内的下载站)<a href=\"https://github.com/waylau/git-for-win\" target=\"_blank\" rel=\"external\">download</a><br>安装正确后 在桌面或文件夹空白处鼠标右键菜单会新增“Git GUI Here”和“Git Bash Here”两个选项。</p>\n<a id=\"more\"></a>\n</li>\n</ul>\n<h4 id=\"使用hexo搭建博客\"><a href=\"#使用hexo搭建博客\" class=\"headerlink\" title=\"使用hexo搭建博客\"></a>使用hexo搭建博客</h4><ul>\n<li><strong>安装全局hexo</strong><br>右键运行Git Bash 执行<code>npm install -g hexo</code>;安装后输入<code>hexo -v</code>,出现版本信息表示安装成功。</li>\n<li><strong>在项目中安装hexo</strong><br> 新建文件夹为你的博客项目名，进入项目打开Git Bash<br> <code>npm install hexo --save</code>在项目中安装hexo;<br> <code>hexo init</code>初始化hexo<br> <code>npm install</code>安装hexo所需依赖包</li>\n<li><strong>安装hexo插件</strong><br> <code>npm install hexo-server --save</code> 本地服务所需插件<br> <code>npm install hexo-deployer-git --save</code>使用git进行部署所需插件</li>\n</ul>\n<h4 id=\"在本地生成博客静态页面并预览\"><a href=\"#在本地生成博客静态页面并预览\" class=\"headerlink\" title=\"在本地生成博客静态页面并预览\"></a>在本地生成博客静态页面并预览</h4><p>在项目路径下打开Git Bash</p>\n<ul>\n<li><strong>在本地生成静态页面</strong><br><code>hexo generate</code>,生成一个存放静态文件的文件夹public;该命令可以简写为:<code>hexo g</code></li>\n</ul>\n<ul>\n<li><strong>启动本地服务器</strong><br><code>hexo server</code>,启动服务;简写为<code>hexo s</code>;<br>默认网址为：<code>http://localhost:4000/</code><br>默认端口为4000，如果端口被占用,执行<code>hexo s -p 5000</code>表示指定服务端口为5000。</li>\n</ul>\n<p>如果以上步骤都不出意外的话，你就会看到一个Hexo博客初始化的页面。</p>\n<h3 id=\"二、GitHub-hexo配置个人博客\"><a href=\"#二、GitHub-hexo配置个人博客\" class=\"headerlink\" title=\"二、GitHub+hexo配置个人博客\"></a><strong>二、GitHub+hexo配置个人博客</strong></h3><p> <strong>上面介绍了如何在本地搭建博客，接下来开始配置GitHub并关联Hexo</strong></p>\n<ul>\n<li><strong>GitHub pages</strong><ol>\n<li>首先注册一个GigHub帐号，注册比较简单就不再赘</li>\n<li>帐号创建号后，需要创建一个仓库(Respository);<strong>注意:</strong>仓库名字要与GitHub用户名一致,比如我的用户名是FireYao,创建的respository名就是FireYao.github.io</li>\n<li>创建好respository后，进入到该respository界面,点击settings拉到最下方找到GitHub Pages,点击 <strong>Launch automatic page generator</strong>,让GitHub生成GitHubPager</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li><strong>配置SSH Keys</strong><ol>\n<li>本地生成ssh密钥。<br>git bash下输入<code>ssh-keygen -t rsa -C ‘你的邮箱地址’</code></li>\n<li>上传本地的公钥串，使当前电脑与GitHub账户建立联系。</li>\n<li>在你的电脑C：\\ Users\\你的计算机用户名.ssh目录下打开刚刚生成的id_rsa.pub，复制里面的内容。然后点击你GitHub账户右上角的头像，选择settings，找到SSH and GPG keys，点击进入之后再点击New SSH key，title随便写，把公钥串粘贴到文本框，保存即可</li>\n</ol>\n</li>\n<li><p><strong>在Hexo配置文件中关联GitHub账号</strong></p>\n<ol>\n<li>在之前搭建好的本地博客项目中编辑<code>_config.yml</code>文件,把其中的deploy参数（没有的话就按如下格式新建，注意冒号后面一定要有一个空格），修改为：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">\ttype: git</div><div class=\"line\">\trepo: https://github.com/FireYao/FireYao.github.io.git</div><div class=\"line\">\tbranch: master</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>将其中的FireYao改为你自己的github用户名</p>\n<ol>\n<li><p>重新部署项目<br>在博客根目录打开Git Bash依次执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean    #会清除缓存文件db.json及之前生成的静态文件夹public；</div><div class=\"line\">hexo g     #会重新生成静态文件夹public；</div><div class=\"line\">hexo deploy    #把本地生成的静态文件部署到FireYao.github.io这个仓库中的master分支上；简写形式为hexo d</div></pre></td></tr></table></figure>\n<p><code>hexo g 和 hexo d可以合并在一起写：hexo g -d</code></p>\n</li>\n<li>在浏览器中访问博客<br>在浏览器中输入<code>FireYao.github.io</code>,没毛病的话，你应该就能看到之前在本地搭建的那个博客页面了。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p></p><p><br>  到这里已经通过Hexo创建了一个最原始的博客，并将博客的静态文件存放到github仓库中，通过外网以github的默认域名访问这个博客。<br></p><br><strong>未完待续</strong><p></p>\n","site":{"data":{}},"excerpt":"<p>最近用使用Hexo和github搭建了一个个人博客，现在记录下来;<br>Hexo是一个强大的博客框架,这里是<a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"external\">中文文档</a></p>\n\n<h3 id=\"一、基础博客搭建流程\"><a href=\"#一、基础博客搭建流程\" class=\"headerlink\" title=\"一、基础博客搭建流程\"></a><strong>一、基础博客搭建流程</strong></h3><h4 id=\"安装Node和Git\"><a href=\"#安装Node和Git\" class=\"headerlink\" title=\"安装Node和Git\"></a>安装Node和Git</h4><ul>\n<li><p>windows：<br>下载Node.js客户端安装即可。<br>在命令行输入node -v出现如下图所示就安装成功了<br><img src=\"http://oqnan33k8.bkt.clouddn.com/myblog_img/hexo_github_blog/node.png\" alt=\"Alt   text\"></p>\n</li>\n<li><p>下载git(国内直接从官网下载比较困难，需要翻墙。这里提供一个国内的下载站)<a href=\"https://github.com/waylau/git-for-win\" target=\"_blank\" rel=\"external\">download</a><br>安装正确后 在桌面或文件夹空白处鼠标右键菜单会新增“Git GUI Here”和“Git Bash Here”两个选项。</p>","more":"</li>\n</ul>\n<h4 id=\"使用hexo搭建博客\"><a href=\"#使用hexo搭建博客\" class=\"headerlink\" title=\"使用hexo搭建博客\"></a>使用hexo搭建博客</h4><ul>\n<li><strong>安装全局hexo</strong><br>右键运行Git Bash 执行<code>npm install -g hexo</code>;安装后输入<code>hexo -v</code>,出现版本信息表示安装成功。</li>\n<li><strong>在项目中安装hexo</strong><br> 新建文件夹为你的博客项目名，进入项目打开Git Bash<br> <code>npm install hexo --save</code>在项目中安装hexo;<br> <code>hexo init</code>初始化hexo<br> <code>npm install</code>安装hexo所需依赖包</li>\n<li><strong>安装hexo插件</strong><br> <code>npm install hexo-server --save</code> 本地服务所需插件<br> <code>npm install hexo-deployer-git --save</code>使用git进行部署所需插件</li>\n</ul>\n<h4 id=\"在本地生成博客静态页面并预览\"><a href=\"#在本地生成博客静态页面并预览\" class=\"headerlink\" title=\"在本地生成博客静态页面并预览\"></a>在本地生成博客静态页面并预览</h4><p>在项目路径下打开Git Bash</p>\n<ul>\n<li><strong>在本地生成静态页面</strong><br><code>hexo generate</code>,生成一个存放静态文件的文件夹public;该命令可以简写为:<code>hexo g</code></li>\n</ul>\n<ul>\n<li><strong>启动本地服务器</strong><br><code>hexo server</code>,启动服务;简写为<code>hexo s</code>;<br>默认网址为：<code>http://localhost:4000/</code><br>默认端口为4000，如果端口被占用,执行<code>hexo s -p 5000</code>表示指定服务端口为5000。</li>\n</ul>\n<p>如果以上步骤都不出意外的话，你就会看到一个Hexo博客初始化的页面。</p>\n<h3 id=\"二、GitHub-hexo配置个人博客\"><a href=\"#二、GitHub-hexo配置个人博客\" class=\"headerlink\" title=\"二、GitHub+hexo配置个人博客\"></a><strong>二、GitHub+hexo配置个人博客</strong></h3><p> <strong>上面介绍了如何在本地搭建博客，接下来开始配置GitHub并关联Hexo</strong></p>\n<ul>\n<li><strong>GitHub pages</strong><ol>\n<li>首先注册一个GigHub帐号，注册比较简单就不再赘</li>\n<li>帐号创建号后，需要创建一个仓库(Respository);<strong>注意:</strong>仓库名字要与GitHub用户名一致,比如我的用户名是FireYao,创建的respository名就是FireYao.github.io</li>\n<li>创建好respository后，进入到该respository界面,点击settings拉到最下方找到GitHub Pages,点击 <strong>Launch automatic page generator</strong>,让GitHub生成GitHubPager</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li><strong>配置SSH Keys</strong><ol>\n<li>本地生成ssh密钥。<br>git bash下输入<code>ssh-keygen -t rsa -C ‘你的邮箱地址’</code></li>\n<li>上传本地的公钥串，使当前电脑与GitHub账户建立联系。</li>\n<li>在你的电脑C：\\ Users\\你的计算机用户名.ssh目录下打开刚刚生成的id_rsa.pub，复制里面的内容。然后点击你GitHub账户右上角的头像，选择settings，找到SSH and GPG keys，点击进入之后再点击New SSH key，title随便写，把公钥串粘贴到文本框，保存即可</li>\n</ol>\n</li>\n<li><p><strong>在Hexo配置文件中关联GitHub账号</strong></p>\n<ol>\n<li>在之前搭建好的本地博客项目中编辑<code>_config.yml</code>文件,把其中的deploy参数（没有的话就按如下格式新建，注意冒号后面一定要有一个空格），修改为：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">\ttype: git</div><div class=\"line\">\trepo: https://github.com/FireYao/FireYao.github.io.git</div><div class=\"line\">\tbranch: master</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>将其中的FireYao改为你自己的github用户名</p>\n<ol>\n<li><p>重新部署项目<br>在博客根目录打开Git Bash依次执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean    #会清除缓存文件db.json及之前生成的静态文件夹public；</div><div class=\"line\">hexo g     #会重新生成静态文件夹public；</div><div class=\"line\">hexo deploy    #把本地生成的静态文件部署到FireYao.github.io这个仓库中的master分支上；简写形式为hexo d</div></pre></td></tr></table></figure>\n<p><code>hexo g 和 hexo d可以合并在一起写：hexo g -d</code></p>\n</li>\n<li>在浏览器中访问博客<br>在浏览器中输入<code>FireYao.github.io</code>,没毛病的话，你应该就能看到之前在本地搭建的那个博客页面了。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p></p><p><br>  到这里已经通过Hexo创建了一个最原始的博客，并将博客的静态文件存放到github仓库中，通过外网以github的默认域名访问这个博客。<br></p><br><strong>未完待续</strong><p></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj5yxwkwu000014iuv7o8wol3","tag_id":"cj5yxwkxc000414iu3kldgemg","_id":"cj5yxwkxz000a14iu787iiwuc"},{"post_id":"cj5yxwkwu000014iuv7o8wol3","tag_id":"cj5yxwkxp000714iu4qeq3fn8","_id":"cj5yxwky0000b14iu44t4j2a6"},{"post_id":"cj5yxwkwu000014iuv7o8wol3","tag_id":"cj5yxwkxw000814iuh10fgt65","_id":"cj5yxwky0000d14iupw6d1qj5"},{"post_id":"cj5yxwkx5000214iu1xcpnypk","tag_id":"cj5yxwkxy000914iu1wtig4d7","_id":"cj5yxwky1000f14iueusnehvo"},{"post_id":"cj5yxwkx5000214iu1xcpnypk","tag_id":"cj5yxwky0000c14iusn69de1p","_id":"cj5yxwky1000g14iuekekzvpz"},{"post_id":"cj5yxwkxj000514iu30dntihm","tag_id":"cj5yxwky1000e14iu8xcssgzv","_id":"cj5yxwky3000j14iu0qqxp1u1"},{"post_id":"cj5yxwkxj000514iu30dntihm","tag_id":"cj5yxwky1000h14iuj018lezy","_id":"cj5yxwky3000k14iurxsctv4v"},{"post_id":"cj5yxwkxj000514iu30dntihm","tag_id":"cj5yxwky2000i14iurgfhldyt","_id":"cj5yxwky3000l14iu27b8uhav"}],"Tag":[{"name":"Java","_id":"cj5yxwkxc000414iu3kldgemg"},{"name":"Java8","_id":"cj5yxwkxp000714iu4qeq3fn8"},{"name":"Lambda","_id":"cj5yxwkxw000814iuh10fgt65"},{"name":"Hello","_id":"cj5yxwkxy000914iu1wtig4d7"},{"name":"膜法","_id":"cj5yxwky0000c14iusn69de1p"},{"name":"博客","_id":"cj5yxwky1000e14iu8xcssgzv"},{"name":"hexo","_id":"cj5yxwky1000h14iuj018lezy"},{"name":"github","_id":"cj5yxwky2000i14iurgfhldyt"}]}}